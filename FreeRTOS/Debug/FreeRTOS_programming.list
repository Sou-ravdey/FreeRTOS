
FreeRTOS_programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b14  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008dc4  08008dc4  00009dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008eac  08008eac  00009eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008eb8  08008eb8  00009eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08008ebc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a68  24000014  08008ed0  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a7c  08008ed0  0000aa7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f0ff  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a9c  00000000  00000000  00029141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001820  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ce  00000000  00000000  0002e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000423d  00000000  00000000  0002f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001be9f  00000000  00000000  0003390b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149a0c  00000000  00000000  0004f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001991b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066bc  00000000  00000000  001991fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  0019f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008dac 	.word	0x08008dac

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	08008dac 	.word	0x08008dac

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <led_green_handler>:
//	}
//
//}

static void led_green_handler(void* parameter)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	TickType_t lstwakeuptime;
	lstwakeuptime = xTaskGetTickCount();
 80005e8:	f006 fede 	bl	80073a8 <xTaskGetTickCount>
 80005ec:	61f8      	str	r0, [r7, #28]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Green LED
 80005ee:	2101      	movs	r1, #1
 80005f0:	4814      	ldr	r0, [pc, #80]	@ (8000644 <led_green_handler+0x64>)
 80005f2:	f001 f832 	bl	800165a <HAL_GPIO_TogglePin>
		char buffer1[] = " GREEN LED ";
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <led_green_handler+0x68>)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(&huart3,(uint8_t*)buffer1, sizeof(buffer1), HAL_MAX_DELAY);
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800060a:	220c      	movs	r2, #12
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <led_green_handler+0x6c>)
 800060e:	f004 f997 	bl	8004940 <HAL_UART_Transmit>
		// Wait for the button press noticication from Task 3.
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f007 fa8c 	bl	8007b38 <xTaskNotifyWait>
 8000620:	61b8      	str	r0, [r7, #24]
		if (status == pdTRUE)
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1e2      	bne.n	80005ee <led_green_handler+0xe>
		{

			next_task_handler = task2_handle;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <led_green_handler+0x70>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <led_green_handler+0x74>)
 800062e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <led_green_handler+0x64>)
 8000636:	f000 fff7 	bl	8001628 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 800063a:	2000      	movs	r0, #0
 800063c:	f006 fc98 	bl	8006f70 <vTaskSuspend>
	{
 8000640:	e7d5      	b.n	80005ee <led_green_handler+0xe>
 8000642:	bf00      	nop
 8000644:	58020400 	.word	0x58020400
 8000648:	08008dd0 	.word	0x08008dd0
 800064c:	24000030 	.word	0x24000030
 8000650:	240000d4 	.word	0x240000d4
 8000654:	240000c8 	.word	0x240000c8

08000658 <led_red_handler>:
	}
}


static void led_red_handler(void* parameter)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	TickType_t lstwakeuptime;
	lstwakeuptime = xTaskGetTickCount();
 8000660:	f006 fea2 	bl	80073a8 <xTaskGetTickCount>
 8000664:	61f8      	str	r0, [r7, #28]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Red LED
 8000666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066a:	4815      	ldr	r0, [pc, #84]	@ (80006c0 <led_red_handler+0x68>)
 800066c:	f000 fff5 	bl	800165a <HAL_GPIO_TogglePin>
		char buffer1[] = " RED LED ";
 8000670:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <led_red_handler+0x6c>)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	ca07      	ldmia	r2, {r0, r1, r2}
 8000678:	c303      	stmia	r3!, {r0, r1}
 800067a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,(uint8_t*)buffer1, sizeof(buffer1), HAL_MAX_DELAY);
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000684:	220a      	movs	r2, #10
 8000686:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <led_red_handler+0x70>)
 8000688:	f004 f95a 	bl	8004940 <HAL_UART_Transmit>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(2000));
 800068c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2000      	movs	r0, #0
 8000696:	f007 fa4f 	bl	8007b38 <xTaskNotifyWait>
 800069a:	61b8      	str	r0, [r7, #24]
				if (status == pdTRUE)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1e1      	bne.n	8000666 <led_red_handler+0xe>
				{
					//vTaskSuspendAll();
					next_task_handler = task4_handle;
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <led_red_handler+0x74>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <led_red_handler+0x78>)
 80006a8:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <led_red_handler+0x68>)
 80006b2:	f000 ffb9 	bl	8001628 <HAL_GPIO_WritePin>
					//xTaskResumeAll();
					vTaskSuspend(NULL);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f006 fc5a 	bl	8006f70 <vTaskSuspend>
	{
 80006bc:	e7d3      	b.n	8000666 <led_red_handler+0xe>
 80006be:	bf00      	nop
 80006c0:	58020400 	.word	0x58020400
 80006c4:	08008ddc 	.word	0x08008ddc
 80006c8:	24000030 	.word	0x24000030
 80006cc:	240000cc 	.word	0x240000cc
 80006d0:	240000c8 	.word	0x240000c8

080006d4 <button_task_handler>:
	}
}


static void button_task_handler(void* parameter)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	uint8_t butn_status = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_status  = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		butn_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	480b      	ldr	r0, [pc, #44]	@ (8000718 <button_task_handler+0x44>)
 80006ea:	f000 ff85 	bl	80015f8 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73bb      	strb	r3, [r7, #14]

		if (butn_status)
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d009      	beq.n	800070c <button_task_handler+0x38>
		{
			if (!prev_status){
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d106      	bne.n	800070c <button_task_handler+0x38>
				xTaskNotify(next_task_handler,0, eNoAction);
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <button_task_handler+0x48>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	f007 fa70 	bl	8007bec <xTaskGenericNotify>
			}
		}
		prev_status = butn_status;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000710:	200a      	movs	r0, #10
 8000712:	f006 fbf7 	bl	8006f04 <vTaskDelay>
		butn_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000716:	e7e5      	b.n	80006e4 <button_task_handler+0x10>
 8000718:	58020800 	.word	0x58020800
 800071c:	240000c8 	.word	0x240000c8

08000720 <resume_all_task_handler>:
	}
}

static void resume_all_task_handler(void* parameter)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000728:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2000      	movs	r0, #0
 8000732:	f007 fa01 	bl	8007b38 <xTaskNotifyWait>
 8000736:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d1f4      	bne.n	8000728 <resume_all_task_handler+0x8>
		{
			next_task_handler = task1_handle;
 800073e:	4b07      	ldr	r3, [pc, #28]	@ (800075c <resume_all_task_handler+0x3c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <resume_all_task_handler+0x40>)
 8000744:	6013      	str	r3, [r2, #0]
			vTaskResume(task1_handle);
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <resume_all_task_handler+0x3c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f006 fcb8 	bl	80070c0 <vTaskResume>
			vTaskResume(task2_handle);
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <resume_all_task_handler+0x44>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f006 fcb3 	bl	80070c0 <vTaskResume>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 800075a:	e7e5      	b.n	8000728 <resume_all_task_handler+0x8>
 800075c:	240000d8 	.word	0x240000d8
 8000760:	240000c8 	.word	0x240000c8
 8000764:	240000d4 	.word	0x240000d4

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af02      	add	r7, sp, #8
	BaseType_t status;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800076e:	f000 f9e3 	bl	8000b38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fbdd 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f8a1 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f94d 	bl	8000a18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f8ff 	bl	8000980 <MX_USART3_UART_Init>
//  buffer[0] = 'H';
//  buffer[1] = 'I';
//
//  HAL_UART_Transmit(&huart3, buffer, 2, HAL_MAX_DELAY);

  status = xTaskCreate(led_green_handler, "LED_Green_handler", 200, NULL, 1, &task1_handle);
 8000782:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <main+0x114>)
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2301      	movs	r3, #1
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	22c8      	movs	r2, #200	@ 0xc8
 800078e:	493c      	ldr	r1, [pc, #240]	@ (8000880 <main+0x118>)
 8000790:	483c      	ldr	r0, [pc, #240]	@ (8000884 <main+0x11c>)
 8000792:	f006 fa71 	bl	8006c78 <xTaskCreate>
 8000796:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00b      	beq.n	80007b6 <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <main+0x4a>

  next_task_handler = task1_handle;
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <main+0x114>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a33      	ldr	r2, [pc, #204]	@ (8000888 <main+0x120>)
 80007bc:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_Red_handler", 200, NULL, 2, &task2_handle);
 80007be:	4b33      	ldr	r3, [pc, #204]	@ (800088c <main+0x124>)
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2302      	movs	r3, #2
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	22c8      	movs	r2, #200	@ 0xc8
 80007ca:	4931      	ldr	r1, [pc, #196]	@ (8000890 <main+0x128>)
 80007cc:	4831      	ldr	r0, [pc, #196]	@ (8000894 <main+0x12c>)
 80007ce:	f006 fa53 	bl	8006c78 <xTaskCreate>
 80007d2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d00b      	beq.n	80007f2 <main+0x8a>
	__asm volatile
 80007da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007de:	f383 8811 	msr	BASEPRI, r3
 80007e2:	f3bf 8f6f 	isb	sy
 80007e6:	f3bf 8f4f 	dsb	sy
 80007ea:	60fb      	str	r3, [r7, #12]
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	e7fd      	b.n	80007ee <main+0x86>

  status = xTaskCreate(button_task_handler, "Button_task_handler", 200, NULL, 3, &task3_handle);
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <main+0x130>)
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	2303      	movs	r3, #3
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2300      	movs	r3, #0
 80007fc:	22c8      	movs	r2, #200	@ 0xc8
 80007fe:	4927      	ldr	r1, [pc, #156]	@ (800089c <main+0x134>)
 8000800:	4827      	ldr	r0, [pc, #156]	@ (80008a0 <main+0x138>)
 8000802:	f006 fa39 	bl	8006c78 <xTaskCreate>
 8000806:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d00b      	beq.n	8000826 <main+0xbe>
	__asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	60bb      	str	r3, [r7, #8]
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <main+0xba>

  status = xTaskCreate(resume_all_task_handler, "Resume_all_task_handler", 200, NULL, 2, &task4_handle);
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <main+0x13c>)
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	2302      	movs	r3, #2
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2300      	movs	r3, #0
 8000830:	22c8      	movs	r2, #200	@ 0xc8
 8000832:	491d      	ldr	r1, [pc, #116]	@ (80008a8 <main+0x140>)
 8000834:	481d      	ldr	r0, [pc, #116]	@ (80008ac <main+0x144>)
 8000836:	f006 fa1f 	bl	8006c78 <xTaskCreate>
 800083a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d00b      	beq.n	800085a <main+0xf2>
	__asm volatile
 8000842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000846:	f383 8811 	msr	BASEPRI, r3
 800084a:	f3bf 8f6f 	isb	sy
 800084e:	f3bf 8f4f 	dsb	sy
 8000852:	607b      	str	r3, [r7, #4]
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	e7fd      	b.n	8000856 <main+0xee>


  vTaskStartScheduler();
 800085a:	f006 fc91 	bl	8007180 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800085e:	f005 fad1 	bl	8005e04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000862:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <main+0x148>)
 8000864:	2100      	movs	r1, #0
 8000866:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <main+0x14c>)
 8000868:	f005 fb16 	bl	8005e98 <osThreadNew>
 800086c:	4603      	mov	r3, r0
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <main+0x150>)
 8000870:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000872:	f005 faeb 	bl	8005e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <main+0x10e>
 800087a:	bf00      	nop
 800087c:	240000d8 	.word	0x240000d8
 8000880:	08008de8 	.word	0x08008de8
 8000884:	080005e1 	.word	0x080005e1
 8000888:	240000c8 	.word	0x240000c8
 800088c:	240000d4 	.word	0x240000d4
 8000890:	08008dfc 	.word	0x08008dfc
 8000894:	08000659 	.word	0x08000659
 8000898:	240000d0 	.word	0x240000d0
 800089c:	08008e0c 	.word	0x08008e0c
 80008a0:	080006d5 	.word	0x080006d5
 80008a4:	240000cc 	.word	0x240000cc
 80008a8:	08008e20 	.word	0x08008e20
 80008ac:	08000721 	.word	0x08000721
 80008b0:	08008e50 	.word	0x08008e50
 80008b4:	08000b29 	.word	0x08000b29
 80008b8:	240000c4 	.word	0x240000c4

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	@ 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fa34 	bl	8008d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f008 fa2e 	bl	8008d38 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <SystemClock_Config+0xbc>)
 80008de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008e6:	2004      	movs	r0, #4
 80008e8:	f000 fed2 	bl	8001690 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <SystemClock_Config+0xc0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a21      	ldr	r2, [pc, #132]	@ (800097c <SystemClock_Config+0xc0>)
 80008f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <SystemClock_Config+0xc0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000908:	bf00      	nop
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <SystemClock_Config+0xc0>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000916:	d1f8      	bne.n	800090a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091c:	2301      	movs	r3, #1
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000920:	2340      	movs	r3, #64	@ 0x40
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff09 	bl	8001744 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000938:	f000 f939 	bl	8000bae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	233f      	movs	r3, #63	@ 0x3f
 800093e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2102      	movs	r1, #2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fb21 	bl	8001fa8 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800096c:	f000 f91f 	bl	8000bae <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3770      	adds	r7, #112	@ 0x70
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024400 	.word	0x58024400
 800097c:	58024800 	.word	0x58024800

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f003 ff69 	bl	80048a0 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f8eb 	bl	8000bae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f005 f903 	bl	8005be6 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f8e2 	bl	8000bae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f005 f938 	bl	8005c62 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f8d9 	bl	8000bae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f005 f8b9 	bl	8005b74 <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f8d1 	bl	8000bae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000030 	.word	0x24000030
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a34:	4a38      	ldr	r2, [pc, #224]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a3e:	4b36      	ldr	r3, [pc, #216]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a52:	4a31      	ldr	r2, [pc, #196]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a70:	4a29      	ldr	r2, [pc, #164]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a7a:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8e:	4a22      	ldr	r2, [pc, #136]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0x100>)
 8000a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	481c      	ldr	r0, [pc, #112]	@ (8000b1c <MX_GPIO_Init+0x104>)
 8000aac:	f000 fdbc 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ab6:	481a      	ldr	r0, [pc, #104]	@ (8000b20 <MX_GPIO_Init+0x108>)
 8000ab8:	f000 fdb6 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4814      	ldr	r0, [pc, #80]	@ (8000b24 <MX_GPIO_Init+0x10c>)
 8000ad2:	f000 fbe1 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <MX_GPIO_Init+0x104>)
 8000aee:	f000 fbd3 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000af2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0x108>)
 8000b0c:	f000 fbc4 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020000 	.word	0x58020000
 8000b20:	58020400 	.word	0x58020400
 8000b24:	58020800 	.word	0x58020800

08000b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f005 fa43 	bl	8005fbc <osDelay>
 8000b36:	e7fb      	b.n	8000b30 <StartDefaultTask+0x8>

08000b38 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b4a:	f000 fb2d 	bl	80011a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b5a:	231f      	movs	r3, #31
 8000b5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b5e:	2387      	movs	r3, #135	@ 0x87
 8000b60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b66:	2300      	movs	r3, #0
 8000b68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fb4b 	bl	8001218 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b82:	2004      	movs	r0, #4
 8000b84:	f000 fb28 	bl	80011d8 <HAL_MPU_Enable>

}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 fa01 	bl	8000fa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb2:	b672      	cpsid	i
}
 8000bb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb6:	bf00      	nop
 8000bb8:	e7fd      	b.n	8000bb6 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_MspInit+0x38>)
 8000bc4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_MspInit+0x38>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_MspInit+0x38>)
 8000bd4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fab6 	bl	8001158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0ba      	sub	sp, #232	@ 0xe8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	22c0      	movs	r2, #192	@ 0xc0
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f008 f88d 	bl	8008d38 <memset>
  if(huart->Instance==USART3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <HAL_UART_MspInit+0xc8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d146      	bne.n	8000cb6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c28:	f04f 0202 	mov.w	r2, #2
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fd80 	bl	8002744 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c4a:	f7ff ffb0 	bl	8000bae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c5a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_UART_MspInit+0xcc>)
 8000c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000caa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_UART_MspInit+0xd0>)
 8000cb2:	f000 faf1 	bl	8001298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	37e8      	adds	r7, #232	@ 0xe8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004800 	.word	0x40004800
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020c00 	.word	0x58020c00

08000ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	@ 0x40
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d827      	bhi.n	8000d2a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	201c      	movs	r0, #28
 8000ce0:	f000 fa3a 	bl	8001158 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce4:	201c      	movs	r0, #28
 8000ce6:	f000 fa51 	bl	800118c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cea:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <HAL_InitTick+0xc4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf0:	4b28      	ldr	r3, [pc, #160]	@ (8000d94 <HAL_InitTick+0xc8>)
 8000cf2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cf6:	4a27      	ldr	r2, [pc, #156]	@ (8000d94 <HAL_InitTick+0xc8>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <HAL_InitTick+0xc8>)
 8000d02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0e:	f107 0210 	add.w	r2, r7, #16
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fcd1 	bl	80026c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d106      	bne.n	8000d36 <HAL_InitTick+0x6a>
 8000d28:	e001      	b.n	8000d2e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e02c      	b.n	8000d88 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d2e:	f001 fc9b 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d36:	f001 fc97 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <HAL_InitTick+0xcc>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000d70:	480a      	ldr	r0, [pc, #40]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d72:	f003 fac7 	bl	8004304 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <HAL_InitTick+0xd0>)
 8000d7e:	f003 fb23 	bl	80043c8 <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3740      	adds	r7, #64	@ 0x40
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24000008 	.word	0x24000008
 8000d94:	58024400 	.word	0x58024400
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	240000dc 	.word	0x240000dc

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f003 fb6b 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240000dc 	.word	0x240000dc

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df0:	4b32      	ldr	r3, [pc, #200]	@ (8000ebc <SystemInit+0xd0>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a31      	ldr	r2, [pc, #196]	@ (8000ebc <SystemInit+0xd0>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec0 <SystemInit+0xd4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d807      	bhi.n	8000e1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec0 <SystemInit+0xd4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 030f 	bic.w	r3, r3, #15
 8000e14:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec0 <SystemInit+0xd4>)
 8000e16:	f043 0303 	orr.w	r3, r3, #3
 8000e1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <SystemInit+0xd8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <SystemInit+0xd8>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <SystemInit+0xd8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <SystemInit+0xd8>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4924      	ldr	r1, [pc, #144]	@ (8000ec4 <SystemInit+0xd8>)
 8000e34:	4b24      	ldr	r3, [pc, #144]	@ (8000ec8 <SystemInit+0xdc>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <SystemInit+0xd4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <SystemInit+0xd4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 030f 	bic.w	r3, r3, #15
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <SystemInit+0xd4>)
 8000e50:	f043 0303 	orr.w	r3, r3, #3
 8000e54:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <SystemInit+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <SystemInit+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <SystemInit+0xd8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <SystemInit+0xd8>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <SystemInit+0xe0>)
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <SystemInit+0xd8>)
 8000e70:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <SystemInit+0xe4>)
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <SystemInit+0xd8>)
 8000e76:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <SystemInit+0xe8>)
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <SystemInit+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <SystemInit+0xd8>)
 8000e82:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <SystemInit+0xe8>)
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <SystemInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <SystemInit+0xd8>)
 8000e8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ed4 <SystemInit+0xe8>)
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <SystemInit+0xd8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <SystemInit+0xd8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <SystemInit+0xd8>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <SystemInit+0xd8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <SystemInit+0xec>)
 8000eac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	52002000 	.word	0x52002000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ecc:	02020200 	.word	0x02020200
 8000ed0:	01ff0000 	.word	0x01ff0000
 8000ed4:	01010280 	.word	0x01010280
 8000ed8:	52004000 	.word	0x52004000

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f7ff ff84 	bl	8000dec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f007 ff1d 	bl	8008d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fc2b 	bl	8000768 <main>
  bx  lr
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f1c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000f20:	08008ebc 	.word	0x08008ebc
  ldr r2, =_sbss
 8000f24:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000f28:	24004a7c 	.word	0x24004a7c

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f903 	bl	8001142 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f3c:	f001 f9ea 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_Init+0x68>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	4913      	ldr	r1, [pc, #76]	@ (8000f9c <HAL_Init+0x6c>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_Init+0x68>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_Init+0x6c>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_Init+0x70>)
 8000f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_Init+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f7ff fea6 	bl	8000ccc <HAL_InitTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e002      	b.n	8000f90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8a:	f7ff fe17 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	08008e74 	.word	0x08008e74
 8000fa0:	24000004 	.word	0x24000004
 8000fa4:	24000000 	.word	0x24000000

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2400000c 	.word	0x2400000c
 8000fcc:	24000128 	.word	0x24000128

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	24000128 	.word	0x24000128

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	4313      	orrs	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	05fa0000 	.word	0x05fa0000

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff4c 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001166:	f7ff ff63 	bl	8001030 <__NVIC_GetPriorityGrouping>
 800116a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f7ff ffb3 	bl	80010dc <NVIC_EncodePriority>
 8001176:	4602      	mov	r2, r0
 8001178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff82 	bl	8001088 <__NVIC_SetPriority>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff56 	bl	800104c <__NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011ac:	f3bf 8f5f 	dmb	sy
}
 80011b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <HAL_MPU_Disable+0x28>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_MPU_Disable+0x28>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_MPU_Disable+0x2c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	e000ed90 	.word	0xe000ed90

080011d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <HAL_MPU_Enable+0x38>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_MPU_Enable+0x3c>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_MPU_Enable+0x3c>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011f6:	f3bf 8f4f 	dsb	sy
}
 80011fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011fc:	f3bf 8f6f 	isb	sy
}
 8001200:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed90 	.word	0xe000ed90
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 8001226:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7adb      	ldrb	r3, [r3, #11]
 8001246:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7a9b      	ldrb	r3, [r3, #10]
 800124e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7b9b      	ldrb	r3, [r3, #14]
 800125e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7bdb      	ldrb	r3, [r3, #15]
 8001266:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7a5b      	ldrb	r3, [r3, #9]
 800126e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7a1b      	ldrb	r3, [r3, #8]
 8001276:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001278:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001282:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001284:	6113      	str	r3, [r2, #16]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed90 	.word	0xe000ed90

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012a6:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <HAL_GPIO_Init+0x234>)
 80012a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012aa:	e194      	b.n	80015d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8186 	beq.w	80015d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d005      	beq.n	80012dc <HAL_GPIO_Init+0x44>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d130      	bne.n	800133e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001312:	2201      	movs	r2, #1
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f003 0201 	and.w	r2, r3, #1
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b03      	cmp	r3, #3
 8001348:	d017      	beq.n	800137a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d123      	bne.n	80013ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	69b9      	ldr	r1, [r7, #24]
 80013ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0203 	and.w	r2, r3, #3
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80e0 	beq.w	80015d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <HAL_GPIO_Init+0x238>)
 8001412:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001416:	4a2e      	ldr	r2, [pc, #184]	@ (80014d0 <HAL_GPIO_Init+0x238>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001420:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <HAL_GPIO_Init+0x238>)
 8001422:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a29      	ldr	r2, [pc, #164]	@ (80014d4 <HAL_GPIO_Init+0x23c>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a20      	ldr	r2, [pc, #128]	@ (80014d8 <HAL_GPIO_Init+0x240>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d052      	beq.n	8001500 <HAL_GPIO_Init+0x268>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <HAL_GPIO_Init+0x244>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d031      	beq.n	80014c6 <HAL_GPIO_Init+0x22e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <HAL_GPIO_Init+0x248>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d02b      	beq.n	80014c2 <HAL_GPIO_Init+0x22a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <HAL_GPIO_Init+0x24c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d025      	beq.n	80014be <HAL_GPIO_Init+0x226>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <HAL_GPIO_Init+0x250>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01f      	beq.n	80014ba <HAL_GPIO_Init+0x222>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <HAL_GPIO_Init+0x254>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x21e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a1a      	ldr	r2, [pc, #104]	@ (80014f0 <HAL_GPIO_Init+0x258>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x21a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <HAL_GPIO_Init+0x25c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x216>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_GPIO_Init+0x260>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x212>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <HAL_GPIO_Init+0x264>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x20e>
 80014a2:	2309      	movs	r3, #9
 80014a4:	e02d      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014a6:	230a      	movs	r3, #10
 80014a8:	e02b      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014aa:	2308      	movs	r3, #8
 80014ac:	e029      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014ae:	2307      	movs	r3, #7
 80014b0:	e027      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014b2:	2306      	movs	r3, #6
 80014b4:	e025      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e023      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014be:	2303      	movs	r3, #3
 80014c0:	e01f      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e01d      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e01b      	b.n	8001502 <HAL_GPIO_Init+0x26a>
 80014ca:	bf00      	nop
 80014cc:	58000080 	.word	0x58000080
 80014d0:	58024400 	.word	0x58024400
 80014d4:	58000400 	.word	0x58000400
 80014d8:	58020000 	.word	0x58020000
 80014dc:	58020400 	.word	0x58020400
 80014e0:	58020800 	.word	0x58020800
 80014e4:	58020c00 	.word	0x58020c00
 80014e8:	58021000 	.word	0x58021000
 80014ec:	58021400 	.word	0x58021400
 80014f0:	58021800 	.word	0x58021800
 80014f4:	58021c00 	.word	0x58021c00
 80014f8:	58022000 	.word	0x58022000
 80014fc:	58022400 	.word	0x58022400
 8001500:	2300      	movs	r3, #0
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001512:	4938      	ldr	r1, [pc, #224]	@ (80015f4 <HAL_GPIO_Init+0x35c>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f47f ae63 	bne.w	80012ac <HAL_GPIO_Init+0x14>
  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3724      	adds	r7, #36	@ 0x24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58000400 	.word	0x58000400

080015f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e001      	b.n	800161a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166c:	887a      	ldrh	r2, [r7, #2]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	041a      	lsls	r2, r3, #16
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43d9      	mvns	r1, r3
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	400b      	ands	r3, r1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001698:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d00a      	beq.n	80016ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e040      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e03e      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ba:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80016c2:	491f      	ldr	r1, [pc, #124]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016ca:	f7ff fc81 	bl	8000fd0 <HAL_GetTick>
 80016ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d0:	e009      	b.n	80016e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016d2:	f7ff fc7d 	bl	8000fd0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016e0:	d901      	bls.n	80016e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e028      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016f2:	d1ee      	bne.n	80016d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b1e      	cmp	r3, #30
 80016f8:	d008      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80016fe:	d005      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b1d      	cmp	r3, #29
 8001704:	d002      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b2d      	cmp	r3, #45	@ 0x2d
 800170a:	d114      	bne.n	8001736 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800170c:	f7ff fc60 	bl	8000fd0 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001712:	e009      	b.n	8001728 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001714:	f7ff fc5c 	bl	8000fd0 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001722:	d901      	bls.n	8001728 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001734:	d1ee      	bne.n	8001714 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	58024800 	.word	0x58024800

08001744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	@ 0x30
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f000 bc1f 	b.w	8001f96 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80b3 	beq.w	80018cc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001766:	4b95      	ldr	r3, [pc, #596]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001770:	4b92      	ldr	r3, [pc, #584]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001778:	2b10      	cmp	r3, #16
 800177a:	d007      	beq.n	800178c <HAL_RCC_OscConfig+0x48>
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	2b18      	cmp	r3, #24
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64>
 8001782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8098 	beq.w	80018ca <HAL_RCC_OscConfig+0x186>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8093 	bne.w	80018ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e3f6      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x7c>
 80017b2:	4b82      	ldr	r3, [pc, #520]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a81      	ldr	r2, [pc, #516]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e058      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d112      	bne.n	80017ee <HAL_RCC_OscConfig+0xaa>
 80017c8:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a7b      	ldr	r2, [pc, #492]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a78      	ldr	r2, [pc, #480]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a75      	ldr	r2, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e041      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0xda>
 80017f8:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80017fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6c      	ldr	r2, [pc, #432]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800180a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a69      	ldr	r2, [pc, #420]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e029      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x10a>
 8001828:	4b64      	ldr	r3, [pc, #400]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a63      	ldr	r2, [pc, #396]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b61      	ldr	r3, [pc, #388]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a60      	ldr	r2, [pc, #384]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800183a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b5e      	ldr	r3, [pc, #376]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a5d      	ldr	r2, [pc, #372]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e011      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
 800184e:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5a      	ldr	r2, [pc, #360]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b58      	ldr	r3, [pc, #352]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a57      	ldr	r2, [pc, #348]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a54      	ldr	r2, [pc, #336]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800186c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001870:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d013      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fba9 	bl	8000fd0 <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff fba5 	bl	8000fd0 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	@ 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e380      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x13e>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb95 	bl	8000fd0 <HAL_GetTick>
 80018a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff fb91 	bl	8000fd0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	@ 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e36c      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018bc:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x166>
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 808c 	beq.w	80019f2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e4:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x1bc>
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d137      	bne.n	8001966 <HAL_RCC_OscConfig+0x222>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d132      	bne.n	8001966 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x1d4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e33e      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 0219 	bic.w	r2, r3, #25
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4925      	ldr	r1, [pc, #148]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff fb51 	bl	8000fd0 <HAL_GetTick>
 800192e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fb4d 	bl	8000fd0 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e328      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4917      	ldr	r1, [pc, #92]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001964:	e045      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d028      	beq.n	80019c0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0219 	bic.w	r2, r3, #25
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4910      	ldr	r1, [pc, #64]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fb26 	bl	8000fd0 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fb22 	bl	8000fd0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e2fd      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	061b      	lsls	r3, r3, #24
 80019b4:	4901      	ldr	r1, [pc, #4]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e01a      	b.n	80019f2 <HAL_RCC_OscConfig+0x2ae>
 80019bc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c0:	4b97      	ldr	r3, [pc, #604]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a96      	ldr	r2, [pc, #600]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb00 	bl	8000fd0 <HAL_GetTick>
 80019d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fafc 	bl	8000fd0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e2d7      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e6:	4b8e      	ldr	r3, [pc, #568]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b88      	ldr	r3, [pc, #544]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a08:	4b85      	ldr	r3, [pc, #532]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d007      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2e0>
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	d11b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x30e>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d116      	bne.n	8001a52 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a24:	4b7e      	ldr	r3, [pc, #504]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2b80      	cmp	r3, #128	@ 0x80
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e2ac      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a3c:	4b78      	ldr	r3, [pc, #480]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	4975      	ldr	r1, [pc, #468]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a50:	e040      	b.n	8001ad4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d023      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a5a:	4b71      	ldr	r3, [pc, #452]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a70      	ldr	r2, [pc, #448]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff fab3 	bl	8000fd0 <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a6e:	f7ff faaf 	bl	8000fd0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e28a      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a80:	4b67      	ldr	r3, [pc, #412]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a8c:	4b64      	ldr	r3, [pc, #400]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	4961      	ldr	r1, [pc, #388]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e018      	b.n	8001ad4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fa8f 	bl	8000fd0 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fa8b 	bl	8000fd0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e266      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ac8:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d036      	beq.n	8001b4e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d019      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aec:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa6c 	bl	8000fd0 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fa68 	bl	8000fd0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e243      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b0e:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x3b8>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b40      	ldr	r3, [pc, #256]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b20:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff fa52 	bl	8000fd0 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fa4e 	bl	8000fd0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e229      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d036      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d019      	beq.n	8001b96 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b62:	4b2f      	ldr	r3, [pc, #188]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2e      	ldr	r2, [pc, #184]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa2f 	bl	8000fd0 <HAL_GetTick>
 8001b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b76:	f7ff fa2b 	bl	8000fd0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e206      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x432>
 8001b94:	e018      	b.n	8001bc8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fa15 	bl	8000fd0 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff fa11 	bl	8000fd0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1ec      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80af 	beq.w	8001d34 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_RCC_OscConfig+0x4e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <HAL_RCC_OscConfig+0x4e0>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001be2:	f7ff f9f5 	bl	8000fd0 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff f9f1 	bl	8000fd0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	@ 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1cc      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_OscConfig+0x4e0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4e4>
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a02      	ldr	r2, [pc, #8]	@ (8001c20 <HAL_RCC_OscConfig+0x4dc>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1c:	e05b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x592>
 8001c1e:	bf00      	nop
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58024800 	.word	0x58024800
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d112      	bne.n	8001c56 <HAL_RCC_OscConfig+0x512>
 8001c30:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c34:	4a9c      	ldr	r2, [pc, #624]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c40:	4a99      	ldr	r2, [pc, #612]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c48:	4b97      	ldr	r3, [pc, #604]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4c:	4a96      	ldr	r2, [pc, #600]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c4e:	f023 0304 	bic.w	r3, r3, #4
 8001c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c54:	e03f      	b.n	8001cd6 <HAL_RCC_OscConfig+0x592>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x540>
 8001c5e:	4b92      	ldr	r3, [pc, #584]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	4a91      	ldr	r2, [pc, #580]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6e:	4a8e      	ldr	r2, [pc, #568]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c76:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	4a8b      	ldr	r2, [pc, #556]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c82:	e028      	b.n	8001cd6 <HAL_RCC_OscConfig+0x592>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b85      	cmp	r3, #133	@ 0x85
 8001c8a:	d112      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56e>
 8001c8c:	4b86      	ldr	r3, [pc, #536]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c90:	4a85      	ldr	r2, [pc, #532]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c98:	4b83      	ldr	r3, [pc, #524]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a82      	ldr	r2, [pc, #520]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca4:	4b80      	ldr	r3, [pc, #512]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb0:	e011      	b.n	8001cd6 <HAL_RCC_OscConfig+0x592>
 8001cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a79      	ldr	r2, [pc, #484]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	4b77      	ldr	r3, [pc, #476]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	4a76      	ldr	r2, [pc, #472]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d015      	beq.n	8001d0a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f977 	bl	8000fd0 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f973 	bl	8000fd0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e14c      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ee      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x5a2>
 8001d08:	e014      	b.n	8001d34 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f961 	bl	8000fd0 <HAL_GetTick>
 8001d0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f95d 	bl	8000fd0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e136      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d28:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 812b 	beq.w	8001f94 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	f000 80bb 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	f040 8095 	bne.w	8001e80 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b54      	ldr	r3, [pc, #336]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff f935 	bl	8000fd0 <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f931 	bl	8000fd0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e10c      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d88:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d8c:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_RCC_OscConfig+0x768>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	4942      	ldr	r1, [pc, #264]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	628b      	str	r3, [r1, #40]	@ 0x28
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	3b01      	subs	r3, #1
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001dd2:	4935      	ldr	r1, [pc, #212]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	4a32      	ldr	r2, [pc, #200]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	492d      	ldr	r1, [pc, #180]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001df8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	f023 020c 	bic.w	r2, r3, #12
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	4928      	ldr	r1, [pc, #160]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0e:	f023 0202 	bic.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4924      	ldr	r1, [pc, #144]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f8ba 	bl	8000fd0 <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f8b6 	bl	8000fd0 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e091      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x71c>
 8001e7e:	e089      	b.n	8001f94 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_RCC_OscConfig+0x764>)
 8001e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f8a0 	bl	8000fd0 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f89c 	bl	8000fd0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d908      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e077      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
 8001ea6:	bf00      	nop
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	fffffc0c 	.word	0xfffffc0c
 8001eb0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e9      	bne.n	8001e94 <HAL_RCC_OscConfig+0x750>
 8001ec0:	e068      	b.n	8001f94 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ec8:	4b35      	ldr	r3, [pc, #212]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d031      	beq.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d12a      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d122      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d11a      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d111      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d108      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	0e1b      	lsrs	r3, r3, #24
 8001f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02b      	b.n	8001f96 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f42:	08db      	lsrs	r3, r3, #3
 8001f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f48:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d01f      	beq.n	8001f94 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	4a11      	ldr	r2, [pc, #68]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f60:	f7ff f836 	bl	8000fd0 <HAL_GetTick>
 8001f64:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f66:	bf00      	nop
 8001f68:	f7ff f832 	bl	8000fd0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d0f9      	beq.n	8001f68 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_RCC_OscConfig+0x860>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <HAL_RCC_OscConfig+0x85c>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3730      	adds	r7, #48	@ 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	ffff0007 	.word	0xffff0007

08001fa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e19c      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	4985      	ldr	r1, [pc, #532]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e184      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002004:	429a      	cmp	r2, r3
 8002006:	d908      	bls.n	800201a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002008:	4b78      	ldr	r3, [pc, #480]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4975      	ldr	r1, [pc, #468]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d010      	beq.n	8002048 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002032:	429a      	cmp	r2, r3
 8002034:	d908      	bls.n	8002048 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002036:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	496a      	ldr	r1, [pc, #424]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002044:	4313      	orrs	r3, r2
 8002046:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d010      	beq.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	4b64      	ldr	r3, [pc, #400]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002060:	429a      	cmp	r2, r3
 8002062:	d908      	bls.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002064:	4b61      	ldr	r3, [pc, #388]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	495e      	ldr	r1, [pc, #376]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002072:	4313      	orrs	r3, r2
 8002074:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d010      	beq.n	80020a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	4b59      	ldr	r3, [pc, #356]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800208e:	429a      	cmp	r2, r3
 8002090:	d908      	bls.n	80020a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002092:	4b56      	ldr	r3, [pc, #344]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4953      	ldr	r1, [pc, #332]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4b4d      	ldr	r3, [pc, #308]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	429a      	cmp	r2, r3
 80020be:	d908      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f023 020f 	bic.w	r2, r3, #15
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4947      	ldr	r1, [pc, #284]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d055      	beq.n	800218a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020de:	4b43      	ldr	r3, [pc, #268]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4940      	ldr	r1, [pc, #256]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f8:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d121      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0f6      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002110:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d115      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0ea      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0de      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0d6      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4925      	ldr	r1, [pc, #148]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 8002156:	4313      	orrs	r3, r2
 8002158:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800215a:	f7fe ff39 	bl	8000fd0 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002160:	e00a      	b.n	8002178 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002162:	f7fe ff35 	bl	8000fd0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0be      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002178:	4b1c      	ldr	r3, [pc, #112]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	429a      	cmp	r2, r3
 8002188:	d1eb      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d208      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f023 020f 	bic.w	r2, r3, #15
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	490e      	ldr	r1, [pc, #56]	@ (80021ec <HAL_RCC_ClockConfig+0x244>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d214      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 020f 	bic.w	r2, r3, #15
 80021ce:	4906      	ldr	r1, [pc, #24]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_RCC_ClockConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e086      	b.n	80022f6 <HAL_RCC_ClockConfig+0x34e>
 80021e8:	52002000 	.word	0x52002000
 80021ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002208:	429a      	cmp	r2, r3
 800220a:	d208      	bcs.n	800221e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800220c:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4939      	ldr	r1, [pc, #228]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800221a:	4313      	orrs	r3, r2
 800221c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002236:	429a      	cmp	r2, r3
 8002238:	d208      	bcs.n	800224c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	492e      	ldr	r1, [pc, #184]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4922      	ldr	r1, [pc, #136]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 8002276:	4313      	orrs	r3, r2
 8002278:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002292:	429a      	cmp	r2, r3
 8002294:	d208      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002296:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4917      	ldr	r1, [pc, #92]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022a8:	f000 f834 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	4912      	ldr	r1, [pc, #72]	@ (8002304 <HAL_RCC_ClockConfig+0x35c>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <HAL_RCC_ClockConfig+0x35c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_RCC_ClockConfig+0x360>)
 80022de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e0:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <HAL_RCC_ClockConfig+0x364>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_RCC_ClockConfig+0x368>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fcee 	bl	8000ccc <HAL_InitTick>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	58024400 	.word	0x58024400
 8002304:	08008e74 	.word	0x08008e74
 8002308:	24000004 	.word	0x24000004
 800230c:	24000000 	.word	0x24000000
 8002310:	24000008 	.word	0x24000008

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231a:	4bb3      	ldr	r3, [pc, #716]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002322:	2b18      	cmp	r3, #24
 8002324:	f200 8155 	bhi.w	80025d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002328:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <HAL_RCC_GetSysClockFreq+0x1c>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002395 	.word	0x08002395
 8002334:	080025d3 	.word	0x080025d3
 8002338:	080025d3 	.word	0x080025d3
 800233c:	080025d3 	.word	0x080025d3
 8002340:	080025d3 	.word	0x080025d3
 8002344:	080025d3 	.word	0x080025d3
 8002348:	080025d3 	.word	0x080025d3
 800234c:	080025d3 	.word	0x080025d3
 8002350:	080023bb 	.word	0x080023bb
 8002354:	080025d3 	.word	0x080025d3
 8002358:	080025d3 	.word	0x080025d3
 800235c:	080025d3 	.word	0x080025d3
 8002360:	080025d3 	.word	0x080025d3
 8002364:	080025d3 	.word	0x080025d3
 8002368:	080025d3 	.word	0x080025d3
 800236c:	080025d3 	.word	0x080025d3
 8002370:	080023c1 	.word	0x080023c1
 8002374:	080025d3 	.word	0x080025d3
 8002378:	080025d3 	.word	0x080025d3
 800237c:	080025d3 	.word	0x080025d3
 8002380:	080025d3 	.word	0x080025d3
 8002384:	080025d3 	.word	0x080025d3
 8002388:	080025d3 	.word	0x080025d3
 800238c:	080025d3 	.word	0x080025d3
 8002390:	080023c7 	.word	0x080023c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002394:	4b94      	ldr	r3, [pc, #592]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023a0:	4b91      	ldr	r3, [pc, #580]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	4a90      	ldr	r2, [pc, #576]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023b2:	e111      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023b4:	4b8d      	ldr	r3, [pc, #564]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b6:	61bb      	str	r3, [r7, #24]
      break;
 80023b8:	e10e      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023ba:	4b8d      	ldr	r3, [pc, #564]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023bc:	61bb      	str	r3, [r7, #24]
      break;
 80023be:	e10b      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023c0:	4b8c      	ldr	r3, [pc, #560]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023c2:	61bb      	str	r3, [r7, #24]
      break;
 80023c4:	e108      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023c6:	4b88      	ldr	r3, [pc, #544]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023d0:	4b85      	ldr	r3, [pc, #532]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023dc:	4b82      	ldr	r3, [pc, #520]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023e6:	4b80      	ldr	r3, [pc, #512]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80e1 	beq.w	80025cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b02      	cmp	r3, #2
 800240e:	f000 8083 	beq.w	8002518 <HAL_RCC_GetSysClockFreq+0x204>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b02      	cmp	r3, #2
 8002416:	f200 80a1 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x248>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x114>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d056      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002426:	e099      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002428:	4b6f      	ldr	r3, [pc, #444]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02d      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002434:	4b6c      	ldr	r3, [pc, #432]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	4a6b      	ldr	r2, [pc, #428]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b62      	ldr	r3, [pc, #392]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002472:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800248e:	e087      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b51      	ldr	r3, [pc, #324]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024d2:	e065      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002600 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b40      	ldr	r3, [pc, #256]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002516:	e043      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002604 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	ed97 6a02 	vldr	s12, [r7, #8]
 800253e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800255a:	e021      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002566:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002600 <HAL_RCC_GetSysClockFreq+0x2ec>
 800256a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002582:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800259e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	0a5b      	lsrs	r3, r3, #9
 80025a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025aa:	3301      	adds	r3, #1
 80025ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c4:	ee17 3a90 	vmov	r3, s15
 80025c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
      break;
 80025d0:	e002      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025d4:	61bb      	str	r3, [r7, #24]
      break;
 80025d6:	bf00      	nop
  }

  return sysclockfreq;
 80025d8:	69bb      	ldr	r3, [r7, #24]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	58024400 	.word	0x58024400
 80025ec:	03d09000 	.word	0x03d09000
 80025f0:	003d0900 	.word	0x003d0900
 80025f4:	016e3600 	.word	0x016e3600
 80025f8:	46000000 	.word	0x46000000
 80025fc:	4c742400 	.word	0x4c742400
 8002600:	4a742400 	.word	0x4a742400
 8002604:	4bb71b00 	.word	0x4bb71b00

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800260e:	f7ff fe81 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8002612:	4602      	mov	r2, r0
 8002614:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_RCC_GetHCLKFreq+0x50>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	490f      	ldr	r1, [pc, #60]	@ (800265c <HAL_RCC_GetHCLKFreq+0x54>)
 8002620:	5ccb      	ldrb	r3, [r1, r3]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_GetHCLKFreq+0x50>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_RCC_GetHCLKFreq+0x54>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <HAL_RCC_GetHCLKFreq+0x58>)
 8002644:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002646:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <HAL_RCC_GetHCLKFreq+0x58>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	58024400 	.word	0x58024400
 800265c:	08008e74 	.word	0x08008e74
 8002660:	24000004 	.word	0x24000004
 8002664:	24000000 	.word	0x24000000

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800266c:	f7ff ffcc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024400 	.word	0x58024400
 8002690:	08008e74 	.word	0x08008e74

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002698:	f7ff ffb6 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	08008e74 	.word	0x08008e74

080026c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	223f      	movs	r2, #63	@ 0x3f
 80026ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0207 	and.w	r2, r3, #7
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 020f 	and.w	r2, r3, #15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_RCC_GetClockConfig+0x7c>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetClockConfig+0x80>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	601a      	str	r2, [r3, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58024400 	.word	0x58024400
 8002740:	52002000 	.word	0x52002000

08002744 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b0c8      	sub	sp, #288	@ 0x120
 800274a:	af00      	add	r7, sp, #0
 800274c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002750:	2300      	movs	r3, #0
 8002752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002756:	2300      	movs	r3, #0
 8002758:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800275c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002768:	2500      	movs	r5, #0
 800276a:	ea54 0305 	orrs.w	r3, r4, r5
 800276e:	d049      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002776:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800277a:	d02f      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800277c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002780:	d828      	bhi.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002786:	d01a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800278c:	d822      	bhi.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002796:	d007      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002798:	e01c      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279a:	4ba7      	ldr	r3, [pc, #668]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	4aa6      	ldr	r2, [pc, #664]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027a6:	e01a      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027ac:	3308      	adds	r3, #8
 80027ae:	2102      	movs	r1, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 fc43 	bl	800403c <RCCEx_PLL2_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027bc:	e00f      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027c2:	3328      	adds	r3, #40	@ 0x28
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fcea 	bl	80041a0 <RCCEx_PLL3_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027d2:	e004      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80027da:	e000      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027e6:	4b94      	ldr	r3, [pc, #592]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80027ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f4:	4a90      	ldr	r2, [pc, #576]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80027fa:	e003      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002800:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002810:	f04f 0900 	mov.w	r9, #0
 8002814:	ea58 0309 	orrs.w	r3, r8, r9
 8002818:	d047      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800281a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	2b04      	cmp	r3, #4
 8002822:	d82a      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002824:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002841 	.word	0x08002841
 8002830:	0800284f 	.word	0x0800284f
 8002834:	08002865 	.word	0x08002865
 8002838:	08002883 	.word	0x08002883
 800283c:	08002883 	.word	0x08002883
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a7c      	ldr	r2, [pc, #496]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800284c:	e01a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800284e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002852:	3308      	adds	r3, #8
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fbf0 	bl	800403c <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002862:	e00f      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002868:	3328      	adds	r3, #40	@ 0x28
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fc97 	bl	80041a0 <RCCEx_PLL3_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002878:	e004      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002884:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002890:	f023 0107 	bic.w	r1, r3, #7
 8002894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	4a67      	ldr	r2, [pc, #412]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800289c:	430b      	orrs	r3, r1
 800289e:	6513      	str	r3, [r2, #80]	@ 0x50
 80028a0:	e003      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80028a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80028aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80028b6:	f04f 0b00 	mov.w	fp, #0
 80028ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80028be:	d054      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80028c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028ca:	d036      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80028cc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028d0:	d82f      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d6:	d032      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028dc:	d829      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028de:	2bc0      	cmp	r3, #192	@ 0xc0
 80028e0:	d02f      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80028e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80028e4:	d825      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028e6:	2b80      	cmp	r3, #128	@ 0x80
 80028e8:	d018      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80028ea:	2b80      	cmp	r3, #128	@ 0x80
 80028ec:	d821      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d007      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80028f6:	e01c      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002904:	e01e      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800290a:	3308      	adds	r3, #8
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fb94 	bl	800403c <RCCEx_PLL2_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800291a:	e013      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800291c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002920:	3328      	adds	r3, #40	@ 0x28
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fc3b 	bl	80041a0 <RCCEx_PLL3_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002930:	e008      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002938:	e004      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800294c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800294e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002950:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	4a37      	ldr	r2, [pc, #220]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295c:	430b      	orrs	r3, r1
 800295e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002960:	e003      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002966:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800296a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002976:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002980:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002984:	460b      	mov	r3, r1
 8002986:	4313      	orrs	r3, r2
 8002988:	d05c      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800298a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800298e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002990:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002994:	d03b      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002996:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800299a:	d834      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a0:	d037      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a6:	d82e      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029ac:	d033      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029ae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029b2:	d828      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b8:	d01a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d822      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c8:	d007      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x296>
 80029ca:	e01c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80029d8:	e01e      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029de:	3308      	adds	r3, #8
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fb2a 	bl	800403c <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80029ee:	e013      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029f4:	3328      	adds	r3, #40	@ 0x28
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fbd1 	bl	80041a0 <RCCEx_PLL3_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a04:	e008      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002a0c:	e004      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a0e:	bf00      	nop
 8002a10:	e002      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a12:	bf00      	nop
 8002a14:	e000      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a24:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2e:	4a02      	ldr	r2, [pc, #8]	@ (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a34:	e006      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002a36:	bf00      	nop
 8002a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4313      	orrs	r3, r2
 8002a62:	d03a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	2b30      	cmp	r3, #48	@ 0x30
 8002a6c:	d01f      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002a6e:	2b30      	cmp	r3, #48	@ 0x30
 8002a70:	d819      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d815      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d111      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4bae      	ldr	r3, [pc, #696]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	4aad      	ldr	r2, [pc, #692]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002a8e:	e011      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a94:	3308      	adds	r3, #8
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 facf 	bl	800403c <RCCEx_PLL2_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002abc:	4b9f      	ldr	r3, [pc, #636]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	4a9c      	ldr	r2, [pc, #624]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad0:	e003      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ad6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002af0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4313      	orrs	r3, r2
 8002af8:	d051      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b04:	d035      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b0a:	d82e      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b10:	d031      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002b12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b16:	d828      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1c:	d01a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b22:	d822      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2c:	d007      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002b2e:	e01c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b30:	4b82      	ldr	r3, [pc, #520]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a81      	ldr	r2, [pc, #516]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b3c:	e01c      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b42:	3308      	adds	r3, #8
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa78 	bl	800403c <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b52:	e011      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fb1f 	bl	80041a0 <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b68:	e006      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b80:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002bb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	d053      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc8:	d033      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002bca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bce:	d82c      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bd4:	d02f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bda:	d826      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002be0:	d02b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002be6:	d820      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bec:	d012      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bf2:	d81a      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c02:	3308      	adds	r3, #8
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fa18 	bl	800403c <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c12:	e015      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c18:	3328      	adds	r3, #40	@ 0x28
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fabf 	bl	80041a0 <RCCEx_PLL3_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c48:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c56:	4a39      	ldr	r2, [pc, #228]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002c62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002c72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c7c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d060      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c8e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002c92:	d039      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002c94:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8002c98:	d832      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d035      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca4:	d82c      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002caa:	d031      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb0:	d826      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cb6:	d02d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002cb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cbc:	d820      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc2:	d012      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc8:	d81a      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd8:	3308      	adds	r3, #8
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 f9ad 	bl	800403c <RCCEx_PLL2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e017      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cee:	3328      	adds	r3, #40	@ 0x28
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fa54 	bl	80041a0 <RCCEx_PLL3_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cfe:	e00c      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002d06:	e008      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d08:	bf00      	nop
 8002d0a:	e006      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d0c:	bf00      	nop
 8002d0e:	e004      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10e      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d32:	4a02      	ldr	r2, [pc, #8]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d38:	e006      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d3a:	bf00      	nop
 8002d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d62:	460b      	mov	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	d037      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d72:	d00e      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d78:	d816      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d82:	d111      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d84:	4bc4      	ldr	r3, [pc, #784]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	4ac3      	ldr	r2, [pc, #780]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d90:	e00f      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d96:	3308      	adds	r3, #8
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f94e 	bl	800403c <RCCEx_PLL2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dba:	4bb7      	ldr	r3, [pc, #732]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc8:	4ab3      	ldr	r2, [pc, #716]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dce:	e003      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4313      	orrs	r3, r2
 8002df6:	d039      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d81c      	bhi.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e02:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e45 	.word	0x08002e45
 8002e0c:	08002e19 	.word	0x08002e19
 8002e10:	08002e27 	.word	0x08002e27
 8002e14:	08002e45 	.word	0x08002e45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e18:	4b9f      	ldr	r3, [pc, #636]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	4a9e      	ldr	r2, [pc, #632]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e24:	e00f      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f904 	bl	800403c <RCCEx_PLL2_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e4e:	4b92      	ldr	r3, [pc, #584]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	f023 0103 	bic.w	r1, r3, #3
 8002e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e62:	e003      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e86:	460b      	mov	r3, r1
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f000 8099 	beq.w	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8e:	4b83      	ldr	r3, [pc, #524]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a82      	ldr	r2, [pc, #520]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe f899 	bl	8000fd0 <HAL_GetTick>
 8002e9e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea4:	f7fe f894 	bl	8000fd0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b64      	cmp	r3, #100	@ 0x64
 8002eb2:	d903      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ebc:	4b77      	ldr	r3, [pc, #476]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ed      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d173      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ed0:	4b71      	ldr	r3, [pc, #452]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ed2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002edc:	4053      	eors	r3, r2
 8002ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef2:	4b69      	ldr	r3, [pc, #420]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a68      	ldr	r2, [pc, #416]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002efe:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f0a:	4a63      	ldr	r2, [pc, #396]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1e:	d118      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f856 	bl	8000fd0 <HAL_GetTick>
 8002f24:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f28:	e00d      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f851 	bl	8000fd0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d903      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8002f44:	e005      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f46:	4b54      	ldr	r3, [pc, #336]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0eb      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002f52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d129      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f6a:	d10e      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f7c:	091a      	lsrs	r2, r3, #4
 8002f7e:	4b48      	ldr	r3, [pc, #288]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	4a45      	ldr	r2, [pc, #276]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6113      	str	r3, [r2, #16]
 8002f88:	e005      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	4a42      	ldr	r2, [pc, #264]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f94:	6113      	str	r3, [r2, #16]
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f98:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fac:	e008      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002fb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002fb6:	e003      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002fbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f002 0301 	and.w	r3, r2, #1
 8002fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f000 8090 	beq.w	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	2b28      	cmp	r3, #40	@ 0x28
 8002fec:	d870      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002fee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	080030d9 	.word	0x080030d9
 8002ff8:	080030d1 	.word	0x080030d1
 8002ffc:	080030d1 	.word	0x080030d1
 8003000:	080030d1 	.word	0x080030d1
 8003004:	080030d1 	.word	0x080030d1
 8003008:	080030d1 	.word	0x080030d1
 800300c:	080030d1 	.word	0x080030d1
 8003010:	080030d1 	.word	0x080030d1
 8003014:	080030a5 	.word	0x080030a5
 8003018:	080030d1 	.word	0x080030d1
 800301c:	080030d1 	.word	0x080030d1
 8003020:	080030d1 	.word	0x080030d1
 8003024:	080030d1 	.word	0x080030d1
 8003028:	080030d1 	.word	0x080030d1
 800302c:	080030d1 	.word	0x080030d1
 8003030:	080030d1 	.word	0x080030d1
 8003034:	080030bb 	.word	0x080030bb
 8003038:	080030d1 	.word	0x080030d1
 800303c:	080030d1 	.word	0x080030d1
 8003040:	080030d1 	.word	0x080030d1
 8003044:	080030d1 	.word	0x080030d1
 8003048:	080030d1 	.word	0x080030d1
 800304c:	080030d1 	.word	0x080030d1
 8003050:	080030d1 	.word	0x080030d1
 8003054:	080030d9 	.word	0x080030d9
 8003058:	080030d1 	.word	0x080030d1
 800305c:	080030d1 	.word	0x080030d1
 8003060:	080030d1 	.word	0x080030d1
 8003064:	080030d1 	.word	0x080030d1
 8003068:	080030d1 	.word	0x080030d1
 800306c:	080030d1 	.word	0x080030d1
 8003070:	080030d1 	.word	0x080030d1
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d1 	.word	0x080030d1
 800307c:	080030d1 	.word	0x080030d1
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080030d1 	.word	0x080030d1
 8003088:	080030d1 	.word	0x080030d1
 800308c:	080030d1 	.word	0x080030d1
 8003090:	080030d1 	.word	0x080030d1
 8003094:	080030d9 	.word	0x080030d9
 8003098:	58024400 	.word	0x58024400
 800309c:	58024800 	.word	0x58024800
 80030a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030a8:	3308      	adds	r3, #8
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ffc5 	bl	800403c <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030b8:	e00f      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030be:	3328      	adds	r3, #40	@ 0x28
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f86c 	bl	80041a0 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80030d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030e2:	4bc0      	ldr	r3, [pc, #768]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f2:	4abc      	ldr	r2, [pc, #752]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80030f8:	e003      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f002 0302 	and.w	r3, r2, #2
 800310e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003118:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800311c:	460b      	mov	r3, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	d043      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800312a:	2b05      	cmp	r3, #5
 800312c:	d824      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800312e:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003181 	.word	0x08003181
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003163 	.word	0x08003163
 8003140:	08003181 	.word	0x08003181
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800314c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003150:	3308      	adds	r3, #8
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 ff71 	bl	800403c <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003160:	e00f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f818 	bl	80041a0 <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800318a:	4b96      	ldr	r3, [pc, #600]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f023 0107 	bic.w	r1, r3, #7
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800319a:	4a92      	ldr	r2, [pc, #584]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800319c:	430b      	orrs	r3, r1
 800319e:	6553      	str	r3, [r2, #84]	@ 0x54
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f002 0304 	and.w	r3, r2, #4
 80031b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	d043      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d824      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003229 	.word	0x08003229
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003229 	.word	0x08003229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f8:	3308      	adds	r3, #8
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 ff1d 	bl	800403c <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ffc4 	bl	80041a0 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003232:	4b6c      	ldr	r3, [pc, #432]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f023 0107 	bic.w	r1, r3, #7
 800323a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003242:	4a68      	ldr	r2, [pc, #416]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6593      	str	r3, [r2, #88]	@ 0x58
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800324e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f002 0320 	and.w	r3, r2, #32
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d055      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800327a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800327e:	d033      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d82c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d826      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003292:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003296:	d02b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800329c:	d820      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a2:	d012      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a8:	d81a      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80032ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032b2:	d115      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b8:	3308      	adds	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 febd 	bl	800403c <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032ce:	3328      	adds	r3, #40	@ 0x28
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ff64 	bl	80041a0 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032e6:	e006      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032e8:	bf00      	nop
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032ec:	bf00      	nop
 80032ee:	e002      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032f0:	bf00      	nop
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330e:	4a35      	ldr	r2, [pc, #212]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6553      	str	r3, [r2, #84]	@ 0x54
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800331a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800332a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d058      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800333e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003346:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800334a:	d033      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800334c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003350:	d82c      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003356:	d02f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335c:	d826      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800335e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003368:	d820      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800336e:	d012      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003374:	d81a      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d022      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d115      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fe57 	bl	800403c <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003394:	e015      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800339a:	3328      	adds	r3, #40	@ 0x28
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fefe 	bl	80041a0 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033aa:	e00a      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033b2:	e006      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80033d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033da:	4a02      	ldr	r2, [pc, #8]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033dc:	430b      	orrs	r3, r1
 80033de:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d055      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003418:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800341c:	d033      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800341e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003422:	d82c      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	d02f      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342e:	d826      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003430:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003434:	d02b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003436:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800343a:	d820      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003440:	d012      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003446:	d81a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003450:	d115      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003456:	3308      	adds	r3, #8
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fdee 	bl	800403c <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003466:	e015      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800346c:	3328      	adds	r3, #40	@ 0x28
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fe95 	bl	80041a0 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800349c:	4ba1      	ldr	r3, [pc, #644]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034ac:	4a9d      	ldr	r2, [pc, #628]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 0308 	and.w	r3, r2, #8
 80034c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d01e      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe54 	bl	80041a0 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003504:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800350c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003514:	4a83      	ldr	r2, [pc, #524]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800351a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f002 0310 	and.w	r3, r2, #16
 8003526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	d01e      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800353a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800353e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fe25 	bl	80041a0 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003562:	4b70      	ldr	r3, [pc, #448]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800356e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003572:	4a6c      	ldr	r2, [pc, #432]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003574:	430b      	orrs	r3, r1
 8003576:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800358e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	d03e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800359c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a4:	d022      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035aa:	d81b      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d00b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80035b6:	e015      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035bc:	3308      	adds	r3, #8
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fd3b 	bl	800403c <RCCEx_PLL2_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035cc:	e00f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d2:	3328      	adds	r3, #40	@ 0x28
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fde2 	bl	80041a0 <RCCEx_PLL3_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035ea:	e000      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80035ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003606:	4a47      	ldr	r2, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003608:	430b      	orrs	r3, r1
 800360a:	6593      	str	r3, [r2, #88]	@ 0x58
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003612:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003622:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003624:	2300      	movs	r3, #0
 8003626:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800363e:	d01f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003644:	d818      	bhi.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800364c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003650:	d007      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4a32      	ldr	r2, [pc, #200]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003660:	e00f      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003666:	3328      	adds	r3, #40	@ 0x28
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fd98 	bl	80041a0 <RCCEx_PLL3_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003676:	e004      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368a:	4b26      	ldr	r3, [pc, #152]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6553      	str	r3, [r2, #84]	@ 0x54
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80036b8:	2300      	movs	r3, #0
 80036ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80036bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036c0:	460b      	mov	r3, r1
 80036c2:	4313      	orrs	r3, r2
 80036c4:	d034      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036e4:	e00e      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ea:	3308      	adds	r3, #8
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fca4 	bl	800403c <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	4a02      	ldr	r2, [pc, #8]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800371c:	430b      	orrs	r3, r1
 800371e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800372c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800373c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800373e:	2300      	movs	r3, #0
 8003740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d00c      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fd23 	bl	80041a0 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003772:	663b      	str	r3, [r7, #96]	@ 0x60
 8003774:	2300      	movs	r3, #0
 8003776:	667b      	str	r3, [r7, #100]	@ 0x64
 8003778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d038      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800378e:	d018      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003794:	d811      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800379a:	d014      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d80b      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037aa:	d106      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4bc3      	ldr	r3, [pc, #780]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	4ac2      	ldr	r2, [pc, #776]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037c0:	e004      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d4:	4bb9      	ldr	r3, [pc, #740]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e4:	4ab5      	ldr	r2, [pc, #724]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003802:	2300      	movs	r3, #0
 8003804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4baa      	ldr	r3, [pc, #680]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800381c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381e:	4aa7      	ldr	r2, [pc, #668]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003830:	653b      	str	r3, [r7, #80]	@ 0x50
 8003832:	2300      	movs	r3, #0
 8003834:	657b      	str	r3, [r7, #84]	@ 0x54
 8003836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003840:	4b9e      	ldr	r3, [pc, #632]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003844:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	4a9b      	ldr	r2, [pc, #620]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003862:	2300      	movs	r3, #0
 8003864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003866:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003870:	4b92      	ldr	r3, [pc, #584]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800387c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387e:	4a8f      	ldr	r2, [pc, #572]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003890:	643b      	str	r3, [r7, #64]	@ 0x40
 8003892:	2300      	movs	r3, #0
 8003894:	647b      	str	r3, [r7, #68]	@ 0x44
 8003896:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a0:	4b86      	ldr	r3, [pc, #536]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	4a85      	ldr	r2, [pc, #532]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038aa:	6113      	str	r3, [r2, #16]
 80038ac:	4b83      	ldr	r3, [pc, #524]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ae:	6919      	ldr	r1, [r3, #16]
 80038b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038b8:	4a80      	ldr	r2, [pc, #512]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ba:	430b      	orrs	r3, r1
 80038bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80038ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038cc:	2300      	movs	r3, #0
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038da:	4b78      	ldr	r3, [pc, #480]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	4a74      	ldr	r2, [pc, #464]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ea:	430b      	orrs	r3, r1
 80038ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fc:	2300      	movs	r3, #0
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003900:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800390a:	4b6c      	ldr	r3, [pc, #432]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391a:	4a68      	ldr	r2, [pc, #416]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	2100      	movs	r1, #0
 800392a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003932:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d011      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003940:	3308      	adds	r3, #8
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fb79 	bl	800403c <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800395c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	2100      	movs	r1, #0
 800396a:	6239      	str	r1, [r7, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
 8003972:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d011      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003980:	3308      	adds	r3, #8
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb59 	bl	800403c <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800399c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	2100      	movs	r1, #0
 80039aa:	61b9      	str	r1, [r7, #24]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d011      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c0:	3308      	adds	r3, #8
 80039c2:	2102      	movs	r1, #2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fb39 	bl	800403c <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80039d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	2100      	movs	r1, #0
 80039ea:	6139      	str	r1, [r7, #16]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	d011      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a00:	3328      	adds	r3, #40	@ 0x28
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fbcb 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d011      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fbab 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	2100      	movs	r1, #0
 8003a6a:	6039      	str	r1, [r7, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a76:	460b      	mov	r3, r1
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	d011      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a80:	3328      	adds	r3, #40	@ 0x28
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fb8b 	bl	80041a0 <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8003aa0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400

08003ac0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003ac4:	f7fe fda0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4904      	ldr	r1, [pc, #16]	@ (8003ae8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	08008e74 	.word	0x08008e74

08003aec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af4:	4ba1      	ldr	r3, [pc, #644]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003afe:	4b9f      	ldr	r3, [pc, #636]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	0b1b      	lsrs	r3, r3, #12
 8003b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b16:	4b99      	ldr	r3, [pc, #612]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8111 	beq.w	8003d5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f000 8083 	beq.w	8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f200 80a1 	bhi.w	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d056      	beq.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b56:	e099      	b.n	8003c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b58:	4b88      	ldr	r3, [pc, #544]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b64:	4b85      	ldr	r3, [pc, #532]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	4a84      	ldr	r2, [pc, #528]	@ (8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bbe:	e087      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	e065      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b59      	ldr	r3, [pc, #356]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	e043      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5a:	4b48      	ldr	r3, [pc, #288]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8a:	e021      	b.n	8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9e:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf6:	ee17 2a90 	vmov	r2, s15
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d24:	ee17 2a90 	vmov	r2, s15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d2c:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d5a:	e008      	b.n	8003d6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	@ 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	03d09000 	.word	0x03d09000
 8003d84:	46000000 	.word	0x46000000
 8003d88:	4c742400 	.word	0x4c742400
 8003d8c:	4a742400 	.word	0x4a742400
 8003d90:	4bb71b00 	.word	0x4bb71b00

08003d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d9c:	4ba1      	ldr	r3, [pc, #644]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003da6:	4b9f      	ldr	r3, [pc, #636]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	0d1b      	lsrs	r3, r3, #20
 8003dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003db2:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003dbe:	4b99      	ldr	r3, [pc, #612]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8111 	beq.w	8004004 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f000 8083 	beq.w	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f200 80a1 	bhi.w	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d056      	beq.n	8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dfe:	e099      	b.n	8003f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e00:	4b88      	ldr	r3, [pc, #544]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d02d      	beq.n	8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e0c:	4b85      	ldr	r3, [pc, #532]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	08db      	lsrs	r3, r3, #3
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	4a84      	ldr	r2, [pc, #528]	@ (8004028 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b7b      	ldr	r3, [pc, #492]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e66:	e087      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	e065      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b59      	ldr	r3, [pc, #356]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eee:	e043      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f32:	e021      	b.n	8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f46:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800402c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f78:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	0a5b      	lsrs	r3, r3, #9
 8003f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9e:	ee17 2a90 	vmov	r2, s15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 2a90 	vmov	r2, s15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffa:	ee17 2a90 	vmov	r2, s15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
}
 8004016:	bf00      	nop
 8004018:	3724      	adds	r7, #36	@ 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
 8004028:	03d09000 	.word	0x03d09000
 800402c:	46000000 	.word	0x46000000
 8004030:	4c742400 	.word	0x4c742400
 8004034:	4a742400 	.word	0x4a742400
 8004038:	4bb71b00 	.word	0x4bb71b00

0800403c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800404a:	4b53      	ldr	r3, [pc, #332]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d101      	bne.n	800405a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e099      	b.n	800418e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800405a:	4b4f      	ldr	r3, [pc, #316]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004066:	f7fc ffb3 	bl	8000fd0 <HAL_GetTick>
 800406a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800406c:	e008      	b.n	8004080 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800406e:	f7fc ffaf 	bl	8000fd0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e086      	b.n	800418e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004080:	4b45      	ldr	r3, [pc, #276]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800408c:	4b42      	ldr	r3, [pc, #264]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	493f      	ldr	r1, [pc, #252]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	025b      	lsls	r3, r3, #9
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d0:	4931      	ldr	r1, [pc, #196]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040d6:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	492d      	ldr	r1, [pc, #180]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f023 0220 	bic.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4928      	ldr	r1, [pc, #160]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004106:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <RCCEx_PLL2_Config+0x160>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	69d2      	ldr	r2, [r2, #28]
 8004112:	00d2      	lsls	r2, r2, #3
 8004114:	4920      	ldr	r1, [pc, #128]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800411a:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4a1e      	ldr	r2, [pc, #120]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004120:	f043 0310 	orr.w	r3, r3, #16
 8004124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800412c:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004132:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004138:	e00f      	b.n	800415a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004140:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a14      	ldr	r2, [pc, #80]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800414c:	e005      	b.n	800415a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800414e:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004158:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800415a:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a0e      	ldr	r2, [pc, #56]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004160:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004166:	f7fc ff33 	bl	8000fd0 <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800416c:	e008      	b.n	8004180 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800416e:	f7fc ff2f 	bl	8000fd0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <RCCEx_PLL2_Config+0x15c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
 800419c:	ffff0007 	.word	0xffff0007

080041a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ae:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d101      	bne.n	80041be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e099      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041be:	4b4f      	ldr	r3, [pc, #316]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4e      	ldr	r2, [pc, #312]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ca:	f7fc ff01 	bl	8000fd0 <HAL_GetTick>
 80041ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041d2:	f7fc fefd 	bl	8000fd0 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e086      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041e4:	4b45      	ldr	r3, [pc, #276]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041f0:	4b42      	ldr	r3, [pc, #264]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	051b      	lsls	r3, r3, #20
 80041fe:	493f      	ldr	r1, [pc, #252]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	628b      	str	r3, [r1, #40]	@ 0x28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	3b01      	subs	r3, #1
 800420a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	025b      	lsls	r3, r3, #9
 8004216:	b29b      	uxth	r3, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	3b01      	subs	r3, #1
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	3b01      	subs	r3, #1
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004234:	4931      	ldr	r1, [pc, #196]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004236:	4313      	orrs	r3, r2
 8004238:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800423a:	4b30      	ldr	r3, [pc, #192]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800423c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	492d      	ldr	r1, [pc, #180]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4928      	ldr	r1, [pc, #160]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800425e:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800426c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426e:	4b24      	ldr	r3, [pc, #144]	@ (8004300 <RCCEx_PLL3_Config+0x160>)
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	69d2      	ldr	r2, [r2, #28]
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	4920      	ldr	r1, [pc, #128]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800427e:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 8004296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800429c:	e00f      	b.n	80042be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042a4:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042b0:	e005      	b.n	80042be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fc fe81 	bl	8000fd0 <HAL_GetTick>
 80042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d0:	e008      	b.n	80042e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042d2:	f7fc fe7d 	bl	8000fd0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <RCCEx_PLL3_Config+0x15c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	58024400 	.word	0x58024400
 8004300:	ffff0007 	.word	0xffff0007

08004304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e049      	b.n	80043aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f841 	bl	80043b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 f9e8 	bl	8004718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e054      	b.n	800448a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a26      	ldr	r2, [pc, #152]	@ (8004498 <HAL_TIM_Base_Start_IT+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440a:	d01d      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a22      	ldr	r2, [pc, #136]	@ (800449c <HAL_TIM_Base_Start_IT+0xd4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a21      	ldr	r2, [pc, #132]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <HAL_TIM_Base_Start_IT+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d115      	bne.n	8004474 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xec>)
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d015      	beq.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004460:	d011      	beq.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e008      	b.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e000      	b.n	8004488 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40001800 	.word	0x40001800
 80044b0:	40014000 	.word	0x40014000
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0202 	mvn.w	r2, #2
 80044ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8e9 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8db 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8ec 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0204 	mvn.w	r2, #4
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8c3 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8b5 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8c6 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0208 	mvn.w	r2, #8
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2204      	movs	r2, #4
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f89d 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f88f 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8a0 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d020      	beq.n	8004600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01b      	beq.n	8004600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0210 	mvn.w	r2, #16
 80045d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2208      	movs	r2, #8
 80045d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f877 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 80045ec:	e005      	b.n	80045fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f869 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f87a 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0201 	mvn.w	r2, #1
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fab6 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f913 	bl	8004878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f90b 	bl	800488c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f834 	bl	8004702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0220 	mvn.w	r2, #32
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8d3 	bl	8004864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a46      	ldr	r2, [pc, #280]	@ (8004844 <TIM_Base_SetConfig+0x12c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a43      	ldr	r2, [pc, #268]	@ (8004848 <TIM_Base_SetConfig+0x130>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a42      	ldr	r2, [pc, #264]	@ (800484c <TIM_Base_SetConfig+0x134>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x40>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a41      	ldr	r2, [pc, #260]	@ (8004850 <TIM_Base_SetConfig+0x138>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a40      	ldr	r2, [pc, #256]	@ (8004854 <TIM_Base_SetConfig+0x13c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a35      	ldr	r2, [pc, #212]	@ (8004844 <TIM_Base_SetConfig+0x12c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01f      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d01b      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a32      	ldr	r2, [pc, #200]	@ (8004848 <TIM_Base_SetConfig+0x130>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d017      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a31      	ldr	r2, [pc, #196]	@ (800484c <TIM_Base_SetConfig+0x134>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <TIM_Base_SetConfig+0x138>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00f      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2f      	ldr	r2, [pc, #188]	@ (8004854 <TIM_Base_SetConfig+0x13c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2e      	ldr	r2, [pc, #184]	@ (8004858 <TIM_Base_SetConfig+0x140>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2d      	ldr	r2, [pc, #180]	@ (800485c <TIM_Base_SetConfig+0x144>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0x9a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004860 <TIM_Base_SetConfig+0x148>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <TIM_Base_SetConfig+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0xf8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <TIM_Base_SetConfig+0x13c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0xf8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <TIM_Base_SetConfig+0x140>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0xf8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a16      	ldr	r2, [pc, #88]	@ (800485c <TIM_Base_SetConfig+0x144>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0xf8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <TIM_Base_SetConfig+0x148>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d103      	bne.n	8004818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]
  }
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40010400 	.word	0x40010400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800

08004864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc f997 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	@ 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 ff22 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8b3 	bl	8004a5c <UART_SetConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e01b      	b.n	8004938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800490e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800491e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 ffa1 	bl	8005878 <UART_CheckIdleState>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	2b20      	cmp	r3, #32
 8004958:	d17b      	bne.n	8004a52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit+0x26>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e074      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fc fb29 	bl	8000fd0 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e030      	b.n	8004a18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f001 f803 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e03d      	b.n	8004a54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3302      	adds	r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e007      	b.n	8004a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c8      	bne.n	80049b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	@ 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 ffcc 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a60:	b092      	sub	sp, #72	@ 0x48
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4bbe      	ldr	r3, [pc, #760]	@ (8004d84 <UART_SetConfig+0x328>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4ab3      	ldr	r2, [pc, #716]	@ (8004d88 <UART_SetConfig+0x32c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4baf      	ldr	r3, [pc, #700]	@ (8004d8c <UART_SetConfig+0x330>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	f023 010f 	bic.w	r1, r3, #15
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4aa6      	ldr	r2, [pc, #664]	@ (8004d90 <UART_SetConfig+0x334>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d177      	bne.n	8004bec <UART_SetConfig+0x190>
 8004afc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d94 <UART_SetConfig+0x338>)
 8004afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b04:	2b28      	cmp	r3, #40	@ 0x28
 8004b06:	d86d      	bhi.n	8004be4 <UART_SetConfig+0x188>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0xb4>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004bb5 	.word	0x08004bb5
 8004b14:	08004be5 	.word	0x08004be5
 8004b18:	08004be5 	.word	0x08004be5
 8004b1c:	08004be5 	.word	0x08004be5
 8004b20:	08004be5 	.word	0x08004be5
 8004b24:	08004be5 	.word	0x08004be5
 8004b28:	08004be5 	.word	0x08004be5
 8004b2c:	08004be5 	.word	0x08004be5
 8004b30:	08004bbd 	.word	0x08004bbd
 8004b34:	08004be5 	.word	0x08004be5
 8004b38:	08004be5 	.word	0x08004be5
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004be5 	.word	0x08004be5
 8004b48:	08004be5 	.word	0x08004be5
 8004b4c:	08004be5 	.word	0x08004be5
 8004b50:	08004bc5 	.word	0x08004bc5
 8004b54:	08004be5 	.word	0x08004be5
 8004b58:	08004be5 	.word	0x08004be5
 8004b5c:	08004be5 	.word	0x08004be5
 8004b60:	08004be5 	.word	0x08004be5
 8004b64:	08004be5 	.word	0x08004be5
 8004b68:	08004be5 	.word	0x08004be5
 8004b6c:	08004be5 	.word	0x08004be5
 8004b70:	08004bcd 	.word	0x08004bcd
 8004b74:	08004be5 	.word	0x08004be5
 8004b78:	08004be5 	.word	0x08004be5
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004be5 	.word	0x08004be5
 8004b88:	08004be5 	.word	0x08004be5
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bd5 	.word	0x08004bd5
 8004b94:	08004be5 	.word	0x08004be5
 8004b98:	08004be5 	.word	0x08004be5
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004be5 	.word	0x08004be5
 8004ba4:	08004be5 	.word	0x08004be5
 8004ba8:	08004be5 	.word	0x08004be5
 8004bac:	08004be5 	.word	0x08004be5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bba:	e326      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc2:	e322      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e31e      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd2:	e31a      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bda:	e316      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bdc:	2340      	movs	r3, #64	@ 0x40
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be2:	e312      	b.n	800520a <UART_SetConfig+0x7ae>
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bea:	e30e      	b.n	800520a <UART_SetConfig+0x7ae>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a69      	ldr	r2, [pc, #420]	@ (8004d98 <UART_SetConfig+0x33c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d130      	bne.n	8004c58 <UART_SetConfig+0x1fc>
 8004bf6:	4b67      	ldr	r3, [pc, #412]	@ (8004d94 <UART_SetConfig+0x338>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	d826      	bhi.n	8004c50 <UART_SetConfig+0x1f4>
 8004c02:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <UART_SetConfig+0x1ac>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c21 	.word	0x08004c21
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	08004c31 	.word	0x08004c31
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c49 	.word	0x08004c49
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e2f0      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e2ec      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c36:	e2e8      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3e:	e2e4      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c40:	2320      	movs	r3, #32
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c46:	e2e0      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c48:	2340      	movs	r3, #64	@ 0x40
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4e:	e2dc      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c56:	e2d8      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8004d9c <UART_SetConfig+0x340>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d130      	bne.n	8004cc4 <UART_SetConfig+0x268>
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <UART_SetConfig+0x338>)
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d826      	bhi.n	8004cbc <UART_SetConfig+0x260>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <UART_SetConfig+0x218>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c8d 	.word	0x08004c8d
 8004c78:	08004c95 	.word	0x08004c95
 8004c7c:	08004c9d 	.word	0x08004c9d
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e2ba      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e2b6      	b.n	800520a <UART_SetConfig+0x7ae>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e2b2      	b.n	800520a <UART_SetConfig+0x7ae>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e2ae      	b.n	800520a <UART_SetConfig+0x7ae>
 8004cac:	2320      	movs	r3, #32
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	e2aa      	b.n	800520a <UART_SetConfig+0x7ae>
 8004cb4:	2340      	movs	r3, #64	@ 0x40
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e2a6      	b.n	800520a <UART_SetConfig+0x7ae>
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e2a2      	b.n	800520a <UART_SetConfig+0x7ae>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <UART_SetConfig+0x344>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d130      	bne.n	8004d30 <UART_SetConfig+0x2d4>
 8004cce:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <UART_SetConfig+0x338>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d826      	bhi.n	8004d28 <UART_SetConfig+0x2cc>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <UART_SetConfig+0x284>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e284      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e280      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e27c      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e278      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e274      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d20:	2340      	movs	r3, #64	@ 0x40
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e270      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e26c      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1b      	ldr	r2, [pc, #108]	@ (8004da4 <UART_SetConfig+0x348>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d142      	bne.n	8004dc0 <UART_SetConfig+0x364>
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <UART_SetConfig+0x338>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d838      	bhi.n	8004db8 <UART_SetConfig+0x35c>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0x2f0>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e24e      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e24a      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e246      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e242      	b.n	800520a <UART_SetConfig+0x7ae>
 8004d84:	cfff69f3 	.word	0xcfff69f3
 8004d88:	58000c00 	.word	0x58000c00
 8004d8c:	11fff4ff 	.word	0x11fff4ff
 8004d90:	40011000 	.word	0x40011000
 8004d94:	58024400 	.word	0x58024400
 8004d98:	40004400 	.word	0x40004400
 8004d9c:	40004800 	.word	0x40004800
 8004da0:	40004c00 	.word	0x40004c00
 8004da4:	40005000 	.word	0x40005000
 8004da8:	2320      	movs	r3, #32
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e22c      	b.n	800520a <UART_SetConfig+0x7ae>
 8004db0:	2340      	movs	r3, #64	@ 0x40
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e228      	b.n	800520a <UART_SetConfig+0x7ae>
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	e224      	b.n	800520a <UART_SetConfig+0x7ae>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4ab1      	ldr	r2, [pc, #708]	@ (800508c <UART_SetConfig+0x630>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d176      	bne.n	8004eb8 <UART_SetConfig+0x45c>
 8004dca:	4bb1      	ldr	r3, [pc, #708]	@ (8005090 <UART_SetConfig+0x634>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd2:	2b28      	cmp	r3, #40	@ 0x28
 8004dd4:	d86c      	bhi.n	8004eb0 <UART_SetConfig+0x454>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0x380>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e81 	.word	0x08004e81
 8004de0:	08004eb1 	.word	0x08004eb1
 8004de4:	08004eb1 	.word	0x08004eb1
 8004de8:	08004eb1 	.word	0x08004eb1
 8004dec:	08004eb1 	.word	0x08004eb1
 8004df0:	08004eb1 	.word	0x08004eb1
 8004df4:	08004eb1 	.word	0x08004eb1
 8004df8:	08004eb1 	.word	0x08004eb1
 8004dfc:	08004e89 	.word	0x08004e89
 8004e00:	08004eb1 	.word	0x08004eb1
 8004e04:	08004eb1 	.word	0x08004eb1
 8004e08:	08004eb1 	.word	0x08004eb1
 8004e0c:	08004eb1 	.word	0x08004eb1
 8004e10:	08004eb1 	.word	0x08004eb1
 8004e14:	08004eb1 	.word	0x08004eb1
 8004e18:	08004eb1 	.word	0x08004eb1
 8004e1c:	08004e91 	.word	0x08004e91
 8004e20:	08004eb1 	.word	0x08004eb1
 8004e24:	08004eb1 	.word	0x08004eb1
 8004e28:	08004eb1 	.word	0x08004eb1
 8004e2c:	08004eb1 	.word	0x08004eb1
 8004e30:	08004eb1 	.word	0x08004eb1
 8004e34:	08004eb1 	.word	0x08004eb1
 8004e38:	08004eb1 	.word	0x08004eb1
 8004e3c:	08004e99 	.word	0x08004e99
 8004e40:	08004eb1 	.word	0x08004eb1
 8004e44:	08004eb1 	.word	0x08004eb1
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004eb1 	.word	0x08004eb1
 8004e54:	08004eb1 	.word	0x08004eb1
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ea1 	.word	0x08004ea1
 8004e60:	08004eb1 	.word	0x08004eb1
 8004e64:	08004eb1 	.word	0x08004eb1
 8004e68:	08004eb1 	.word	0x08004eb1
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004eb1 	.word	0x08004eb1
 8004e74:	08004eb1 	.word	0x08004eb1
 8004e78:	08004eb1 	.word	0x08004eb1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e86:	e1c0      	b.n	800520a <UART_SetConfig+0x7ae>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8e:	e1bc      	b.n	800520a <UART_SetConfig+0x7ae>
 8004e90:	2308      	movs	r3, #8
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e96:	e1b8      	b.n	800520a <UART_SetConfig+0x7ae>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9e:	e1b4      	b.n	800520a <UART_SetConfig+0x7ae>
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea6:	e1b0      	b.n	800520a <UART_SetConfig+0x7ae>
 8004ea8:	2340      	movs	r3, #64	@ 0x40
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eae:	e1ac      	b.n	800520a <UART_SetConfig+0x7ae>
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb6:	e1a8      	b.n	800520a <UART_SetConfig+0x7ae>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a75      	ldr	r2, [pc, #468]	@ (8005094 <UART_SetConfig+0x638>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d130      	bne.n	8004f24 <UART_SetConfig+0x4c8>
 8004ec2:	4b73      	ldr	r3, [pc, #460]	@ (8005090 <UART_SetConfig+0x634>)
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d826      	bhi.n	8004f1c <UART_SetConfig+0x4c0>
 8004ece:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0x478>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004eed 	.word	0x08004eed
 8004ed8:	08004ef5 	.word	0x08004ef5
 8004edc:	08004efd 	.word	0x08004efd
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef2:	e18a      	b.n	800520a <UART_SetConfig+0x7ae>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efa:	e186      	b.n	800520a <UART_SetConfig+0x7ae>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f02:	e182      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0a:	e17e      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f12:	e17a      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f14:	2340      	movs	r3, #64	@ 0x40
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1a:	e176      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f1c:	2380      	movs	r3, #128	@ 0x80
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f22:	e172      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5b      	ldr	r2, [pc, #364]	@ (8005098 <UART_SetConfig+0x63c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d130      	bne.n	8004f90 <UART_SetConfig+0x534>
 8004f2e:	4b58      	ldr	r3, [pc, #352]	@ (8005090 <UART_SetConfig+0x634>)
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d826      	bhi.n	8004f88 <UART_SetConfig+0x52c>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0x4e4>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f61 	.word	0x08004f61
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5e:	e154      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f66:	e150      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	e14c      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e148      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7e:	e144      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f80:	2340      	movs	r3, #64	@ 0x40
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e140      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e13c      	b.n	800520a <UART_SetConfig+0x7ae>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a41      	ldr	r2, [pc, #260]	@ (800509c <UART_SetConfig+0x640>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f040 8082 	bne.w	80050a0 <UART_SetConfig+0x644>
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005090 <UART_SetConfig+0x634>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa4:	2b28      	cmp	r3, #40	@ 0x28
 8004fa6:	d86d      	bhi.n	8005084 <UART_SetConfig+0x628>
 8004fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0x554>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005055 	.word	0x08005055
 8004fb4:	08005085 	.word	0x08005085
 8004fb8:	08005085 	.word	0x08005085
 8004fbc:	08005085 	.word	0x08005085
 8004fc0:	08005085 	.word	0x08005085
 8004fc4:	08005085 	.word	0x08005085
 8004fc8:	08005085 	.word	0x08005085
 8004fcc:	08005085 	.word	0x08005085
 8004fd0:	0800505d 	.word	0x0800505d
 8004fd4:	08005085 	.word	0x08005085
 8004fd8:	08005085 	.word	0x08005085
 8004fdc:	08005085 	.word	0x08005085
 8004fe0:	08005085 	.word	0x08005085
 8004fe4:	08005085 	.word	0x08005085
 8004fe8:	08005085 	.word	0x08005085
 8004fec:	08005085 	.word	0x08005085
 8004ff0:	08005065 	.word	0x08005065
 8004ff4:	08005085 	.word	0x08005085
 8004ff8:	08005085 	.word	0x08005085
 8004ffc:	08005085 	.word	0x08005085
 8005000:	08005085 	.word	0x08005085
 8005004:	08005085 	.word	0x08005085
 8005008:	08005085 	.word	0x08005085
 800500c:	08005085 	.word	0x08005085
 8005010:	0800506d 	.word	0x0800506d
 8005014:	08005085 	.word	0x08005085
 8005018:	08005085 	.word	0x08005085
 800501c:	08005085 	.word	0x08005085
 8005020:	08005085 	.word	0x08005085
 8005024:	08005085 	.word	0x08005085
 8005028:	08005085 	.word	0x08005085
 800502c:	08005085 	.word	0x08005085
 8005030:	08005075 	.word	0x08005075
 8005034:	08005085 	.word	0x08005085
 8005038:	08005085 	.word	0x08005085
 800503c:	08005085 	.word	0x08005085
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	0800507d 	.word	0x0800507d
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e0d6      	b.n	800520a <UART_SetConfig+0x7ae>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e0d2      	b.n	800520a <UART_SetConfig+0x7ae>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e0ce      	b.n	800520a <UART_SetConfig+0x7ae>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e0ca      	b.n	800520a <UART_SetConfig+0x7ae>
 8005074:	2320      	movs	r3, #32
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e0c6      	b.n	800520a <UART_SetConfig+0x7ae>
 800507c:	2340      	movs	r3, #64	@ 0x40
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e0c2      	b.n	800520a <UART_SetConfig+0x7ae>
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e0be      	b.n	800520a <UART_SetConfig+0x7ae>
 800508c:	40011400 	.word	0x40011400
 8005090:	58024400 	.word	0x58024400
 8005094:	40007800 	.word	0x40007800
 8005098:	40007c00 	.word	0x40007c00
 800509c:	40011800 	.word	0x40011800
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4aad      	ldr	r2, [pc, #692]	@ (800535c <UART_SetConfig+0x900>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d176      	bne.n	8005198 <UART_SetConfig+0x73c>
 80050aa:	4bad      	ldr	r3, [pc, #692]	@ (8005360 <UART_SetConfig+0x904>)
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b2:	2b28      	cmp	r3, #40	@ 0x28
 80050b4:	d86c      	bhi.n	8005190 <UART_SetConfig+0x734>
 80050b6:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <UART_SetConfig+0x660>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005161 	.word	0x08005161
 80050c0:	08005191 	.word	0x08005191
 80050c4:	08005191 	.word	0x08005191
 80050c8:	08005191 	.word	0x08005191
 80050cc:	08005191 	.word	0x08005191
 80050d0:	08005191 	.word	0x08005191
 80050d4:	08005191 	.word	0x08005191
 80050d8:	08005191 	.word	0x08005191
 80050dc:	08005169 	.word	0x08005169
 80050e0:	08005191 	.word	0x08005191
 80050e4:	08005191 	.word	0x08005191
 80050e8:	08005191 	.word	0x08005191
 80050ec:	08005191 	.word	0x08005191
 80050f0:	08005191 	.word	0x08005191
 80050f4:	08005191 	.word	0x08005191
 80050f8:	08005191 	.word	0x08005191
 80050fc:	08005171 	.word	0x08005171
 8005100:	08005191 	.word	0x08005191
 8005104:	08005191 	.word	0x08005191
 8005108:	08005191 	.word	0x08005191
 800510c:	08005191 	.word	0x08005191
 8005110:	08005191 	.word	0x08005191
 8005114:	08005191 	.word	0x08005191
 8005118:	08005191 	.word	0x08005191
 800511c:	08005179 	.word	0x08005179
 8005120:	08005191 	.word	0x08005191
 8005124:	08005191 	.word	0x08005191
 8005128:	08005191 	.word	0x08005191
 800512c:	08005191 	.word	0x08005191
 8005130:	08005191 	.word	0x08005191
 8005134:	08005191 	.word	0x08005191
 8005138:	08005191 	.word	0x08005191
 800513c:	08005181 	.word	0x08005181
 8005140:	08005191 	.word	0x08005191
 8005144:	08005191 	.word	0x08005191
 8005148:	08005191 	.word	0x08005191
 800514c:	08005191 	.word	0x08005191
 8005150:	08005191 	.word	0x08005191
 8005154:	08005191 	.word	0x08005191
 8005158:	08005191 	.word	0x08005191
 800515c:	08005189 	.word	0x08005189
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e050      	b.n	800520a <UART_SetConfig+0x7ae>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516e:	e04c      	b.n	800520a <UART_SetConfig+0x7ae>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005176:	e048      	b.n	800520a <UART_SetConfig+0x7ae>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517e:	e044      	b.n	800520a <UART_SetConfig+0x7ae>
 8005180:	2320      	movs	r3, #32
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005186:	e040      	b.n	800520a <UART_SetConfig+0x7ae>
 8005188:	2340      	movs	r3, #64	@ 0x40
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518e:	e03c      	b.n	800520a <UART_SetConfig+0x7ae>
 8005190:	2380      	movs	r3, #128	@ 0x80
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e038      	b.n	800520a <UART_SetConfig+0x7ae>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a71      	ldr	r2, [pc, #452]	@ (8005364 <UART_SetConfig+0x908>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d130      	bne.n	8005204 <UART_SetConfig+0x7a8>
 80051a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005360 <UART_SetConfig+0x904>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d826      	bhi.n	80051fc <UART_SetConfig+0x7a0>
 80051ae:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <UART_SetConfig+0x758>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d2:	e01a      	b.n	800520a <UART_SetConfig+0x7ae>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e016      	b.n	800520a <UART_SetConfig+0x7ae>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e2:	e012      	b.n	800520a <UART_SetConfig+0x7ae>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ea:	e00e      	b.n	800520a <UART_SetConfig+0x7ae>
 80051ec:	2320      	movs	r3, #32
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f2:	e00a      	b.n	800520a <UART_SetConfig+0x7ae>
 80051f4:	2340      	movs	r3, #64	@ 0x40
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fa:	e006      	b.n	800520a <UART_SetConfig+0x7ae>
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e002      	b.n	800520a <UART_SetConfig+0x7ae>
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a55      	ldr	r2, [pc, #340]	@ (8005364 <UART_SetConfig+0x908>)
 8005210:	4293      	cmp	r3, r2
 8005212:	f040 80f8 	bne.w	8005406 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005216:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800521a:	2b20      	cmp	r3, #32
 800521c:	dc46      	bgt.n	80052ac <UART_SetConfig+0x850>
 800521e:	2b02      	cmp	r3, #2
 8005220:	db75      	blt.n	800530e <UART_SetConfig+0x8b2>
 8005222:	3b02      	subs	r3, #2
 8005224:	2b1e      	cmp	r3, #30
 8005226:	d872      	bhi.n	800530e <UART_SetConfig+0x8b2>
 8005228:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <UART_SetConfig+0x7d4>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	080052b3 	.word	0x080052b3
 8005234:	0800530f 	.word	0x0800530f
 8005238:	080052bb 	.word	0x080052bb
 800523c:	0800530f 	.word	0x0800530f
 8005240:	0800530f 	.word	0x0800530f
 8005244:	0800530f 	.word	0x0800530f
 8005248:	080052cb 	.word	0x080052cb
 800524c:	0800530f 	.word	0x0800530f
 8005250:	0800530f 	.word	0x0800530f
 8005254:	0800530f 	.word	0x0800530f
 8005258:	0800530f 	.word	0x0800530f
 800525c:	0800530f 	.word	0x0800530f
 8005260:	0800530f 	.word	0x0800530f
 8005264:	0800530f 	.word	0x0800530f
 8005268:	080052db 	.word	0x080052db
 800526c:	0800530f 	.word	0x0800530f
 8005270:	0800530f 	.word	0x0800530f
 8005274:	0800530f 	.word	0x0800530f
 8005278:	0800530f 	.word	0x0800530f
 800527c:	0800530f 	.word	0x0800530f
 8005280:	0800530f 	.word	0x0800530f
 8005284:	0800530f 	.word	0x0800530f
 8005288:	0800530f 	.word	0x0800530f
 800528c:	0800530f 	.word	0x0800530f
 8005290:	0800530f 	.word	0x0800530f
 8005294:	0800530f 	.word	0x0800530f
 8005298:	0800530f 	.word	0x0800530f
 800529c:	0800530f 	.word	0x0800530f
 80052a0:	0800530f 	.word	0x0800530f
 80052a4:	0800530f 	.word	0x0800530f
 80052a8:	08005301 	.word	0x08005301
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d02a      	beq.n	8005306 <UART_SetConfig+0x8aa>
 80052b0:	e02d      	b.n	800530e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052b2:	f7fe fc05 	bl	8003ac0 <HAL_RCCEx_GetD3PCLK1Freq>
 80052b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052b8:	e02f      	b.n	800531a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fc14 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c8:	e027      	b.n	800531a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ca:	f107 0318 	add.w	r3, r7, #24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fd60 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052d8:	e01f      	b.n	800531a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052da:	4b21      	ldr	r3, [pc, #132]	@ (8005360 <UART_SetConfig+0x904>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <UART_SetConfig+0x904>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <UART_SetConfig+0x90c>)
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052f8:	e00f      	b.n	800531a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <UART_SetConfig+0x90c>)
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052fe:	e00c      	b.n	800531a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005300:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <UART_SetConfig+0x910>)
 8005302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800531a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 81ee 	beq.w	80056fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <UART_SetConfig+0x914>)
 8005328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532c:	461a      	mov	r2, r3
 800532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005330:	fbb3 f3f2 	udiv	r3, r3, r2
 8005334:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005342:	429a      	cmp	r2, r3
 8005344:	d305      	bcc.n	8005352 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800534c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534e:	429a      	cmp	r2, r3
 8005350:	d910      	bls.n	8005374 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005358:	e1d1      	b.n	80056fe <UART_SetConfig+0xca2>
 800535a:	bf00      	nop
 800535c:	40011c00 	.word	0x40011c00
 8005360:	58024400 	.word	0x58024400
 8005364:	58000c00 	.word	0x58000c00
 8005368:	03d09000 	.word	0x03d09000
 800536c:	003d0900 	.word	0x003d0900
 8005370:	08008e84 	.word	0x08008e84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005376:	2200      	movs	r2, #0
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	4ac0      	ldr	r2, [pc, #768]	@ (8005684 <UART_SetConfig+0xc28>)
 8005382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005386:	b29b      	uxth	r3, r3
 8005388:	2200      	movs	r2, #0
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005396:	f7fa ffab 	bl	80002f0 <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	020b      	lsls	r3, r1, #8
 80053ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053b0:	0202      	lsls	r2, r0, #8
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	6849      	ldr	r1, [r1, #4]
 80053b6:	0849      	lsrs	r1, r1, #1
 80053b8:	2000      	movs	r0, #0
 80053ba:	460c      	mov	r4, r1
 80053bc:	4605      	mov	r5, r0
 80053be:	eb12 0804 	adds.w	r8, r2, r4
 80053c2:	eb43 0905 	adc.w	r9, r3, r5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	469a      	mov	sl, r3
 80053ce:	4693      	mov	fp, r2
 80053d0:	4652      	mov	r2, sl
 80053d2:	465b      	mov	r3, fp
 80053d4:	4640      	mov	r0, r8
 80053d6:	4649      	mov	r1, r9
 80053d8:	f7fa ff8a 	bl	80002f0 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ea:	d308      	bcc.n	80053fe <UART_SetConfig+0x9a2>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053f2:	d204      	bcs.n	80053fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053fa:	60da      	str	r2, [r3, #12]
 80053fc:	e17f      	b.n	80056fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005404:	e17b      	b.n	80056fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800540e:	f040 80bd 	bne.w	800558c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005416:	2b20      	cmp	r3, #32
 8005418:	dc48      	bgt.n	80054ac <UART_SetConfig+0xa50>
 800541a:	2b00      	cmp	r3, #0
 800541c:	db7b      	blt.n	8005516 <UART_SetConfig+0xaba>
 800541e:	2b20      	cmp	r3, #32
 8005420:	d879      	bhi.n	8005516 <UART_SetConfig+0xaba>
 8005422:	a201      	add	r2, pc, #4	@ (adr r2, 8005428 <UART_SetConfig+0x9cc>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	080054b3 	.word	0x080054b3
 800542c:	080054bb 	.word	0x080054bb
 8005430:	08005517 	.word	0x08005517
 8005434:	08005517 	.word	0x08005517
 8005438:	080054c3 	.word	0x080054c3
 800543c:	08005517 	.word	0x08005517
 8005440:	08005517 	.word	0x08005517
 8005444:	08005517 	.word	0x08005517
 8005448:	080054d3 	.word	0x080054d3
 800544c:	08005517 	.word	0x08005517
 8005450:	08005517 	.word	0x08005517
 8005454:	08005517 	.word	0x08005517
 8005458:	08005517 	.word	0x08005517
 800545c:	08005517 	.word	0x08005517
 8005460:	08005517 	.word	0x08005517
 8005464:	08005517 	.word	0x08005517
 8005468:	080054e3 	.word	0x080054e3
 800546c:	08005517 	.word	0x08005517
 8005470:	08005517 	.word	0x08005517
 8005474:	08005517 	.word	0x08005517
 8005478:	08005517 	.word	0x08005517
 800547c:	08005517 	.word	0x08005517
 8005480:	08005517 	.word	0x08005517
 8005484:	08005517 	.word	0x08005517
 8005488:	08005517 	.word	0x08005517
 800548c:	08005517 	.word	0x08005517
 8005490:	08005517 	.word	0x08005517
 8005494:	08005517 	.word	0x08005517
 8005498:	08005517 	.word	0x08005517
 800549c:	08005517 	.word	0x08005517
 80054a0:	08005517 	.word	0x08005517
 80054a4:	08005517 	.word	0x08005517
 80054a8:	08005509 	.word	0x08005509
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d02e      	beq.n	800550e <UART_SetConfig+0xab2>
 80054b0:	e031      	b.n	8005516 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7fd f8d9 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80054b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054b8:	e033      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ba:	f7fd f8eb 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 80054be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054c0:	e02f      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fb10 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d0:	e027      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054d2:	f107 0318 	add.w	r3, r7, #24
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fc5c 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054e0:	e01f      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054e2:	4b69      	ldr	r3, [pc, #420]	@ (8005688 <UART_SetConfig+0xc2c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ee:	4b66      	ldr	r3, [pc, #408]	@ (8005688 <UART_SetConfig+0xc2c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	08db      	lsrs	r3, r3, #3
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	4a64      	ldr	r2, [pc, #400]	@ (800568c <UART_SetConfig+0xc30>)
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005500:	e00f      	b.n	8005522 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005502:	4b62      	ldr	r3, [pc, #392]	@ (800568c <UART_SetConfig+0xc30>)
 8005504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005506:	e00c      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005508:	4b61      	ldr	r3, [pc, #388]	@ (8005690 <UART_SetConfig+0xc34>)
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800550c:	e009      	b.n	8005522 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005514:	e005      	b.n	8005522 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80ea 	beq.w	80056fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	4a55      	ldr	r2, [pc, #340]	@ (8005684 <UART_SetConfig+0xc28>)
 8005530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005534:	461a      	mov	r2, r3
 8005536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005538:	fbb3 f3f2 	udiv	r3, r3, r2
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d916      	bls.n	8005584 <UART_SetConfig+0xb28>
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d212      	bcs.n	8005584 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	b29b      	uxth	r3, r3
 8005562:	f023 030f 	bic.w	r3, r3, #15
 8005566:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	b29a      	uxth	r2, r3
 8005574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005576:	4313      	orrs	r3, r2
 8005578:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	e0bc      	b.n	80056fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800558a:	e0b8      	b.n	80056fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800558c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005590:	2b20      	cmp	r3, #32
 8005592:	dc4b      	bgt.n	800562c <UART_SetConfig+0xbd0>
 8005594:	2b00      	cmp	r3, #0
 8005596:	f2c0 8087 	blt.w	80056a8 <UART_SetConfig+0xc4c>
 800559a:	2b20      	cmp	r3, #32
 800559c:	f200 8084 	bhi.w	80056a8 <UART_SetConfig+0xc4c>
 80055a0:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <UART_SetConfig+0xb4c>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	08005633 	.word	0x08005633
 80055ac:	0800563b 	.word	0x0800563b
 80055b0:	080056a9 	.word	0x080056a9
 80055b4:	080056a9 	.word	0x080056a9
 80055b8:	08005643 	.word	0x08005643
 80055bc:	080056a9 	.word	0x080056a9
 80055c0:	080056a9 	.word	0x080056a9
 80055c4:	080056a9 	.word	0x080056a9
 80055c8:	08005653 	.word	0x08005653
 80055cc:	080056a9 	.word	0x080056a9
 80055d0:	080056a9 	.word	0x080056a9
 80055d4:	080056a9 	.word	0x080056a9
 80055d8:	080056a9 	.word	0x080056a9
 80055dc:	080056a9 	.word	0x080056a9
 80055e0:	080056a9 	.word	0x080056a9
 80055e4:	080056a9 	.word	0x080056a9
 80055e8:	08005663 	.word	0x08005663
 80055ec:	080056a9 	.word	0x080056a9
 80055f0:	080056a9 	.word	0x080056a9
 80055f4:	080056a9 	.word	0x080056a9
 80055f8:	080056a9 	.word	0x080056a9
 80055fc:	080056a9 	.word	0x080056a9
 8005600:	080056a9 	.word	0x080056a9
 8005604:	080056a9 	.word	0x080056a9
 8005608:	080056a9 	.word	0x080056a9
 800560c:	080056a9 	.word	0x080056a9
 8005610:	080056a9 	.word	0x080056a9
 8005614:	080056a9 	.word	0x080056a9
 8005618:	080056a9 	.word	0x080056a9
 800561c:	080056a9 	.word	0x080056a9
 8005620:	080056a9 	.word	0x080056a9
 8005624:	080056a9 	.word	0x080056a9
 8005628:	0800569b 	.word	0x0800569b
 800562c:	2b40      	cmp	r3, #64	@ 0x40
 800562e:	d037      	beq.n	80056a0 <UART_SetConfig+0xc44>
 8005630:	e03a      	b.n	80056a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005632:	f7fd f819 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8005636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005638:	e03c      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800563a:	f7fd f82b 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 800563e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005640:	e038      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fa50 	bl	8003aec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005650:	e030      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005652:	f107 0318 	add.w	r3, r7, #24
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe fb9c 	bl	8003d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005660:	e028      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <UART_SetConfig+0xc2c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <UART_SetConfig+0xc2c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	08db      	lsrs	r3, r3, #3
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	4a04      	ldr	r2, [pc, #16]	@ (800568c <UART_SetConfig+0xc30>)
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005680:	e018      	b.n	80056b4 <UART_SetConfig+0xc58>
 8005682:	bf00      	nop
 8005684:	08008e84 	.word	0x08008e84
 8005688:	58024400 	.word	0x58024400
 800568c:	03d09000 	.word	0x03d09000
 8005690:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <UART_SetConfig+0xccc>)
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005698:	e00c      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800569a:	4b24      	ldr	r3, [pc, #144]	@ (800572c <UART_SetConfig+0xcd0>)
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569e:	e009      	b.n	80056b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a6:	e005      	b.n	80056b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056b2:	bf00      	nop
    }

    if (pclk != 0U)
 80056b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d021      	beq.n	80056fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <UART_SetConfig+0xcd4>)
 80056c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	441a      	add	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d909      	bls.n	80056f8 <UART_SetConfig+0xc9c>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ea:	d205      	bcs.n	80056f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e002      	b.n	80056fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2201      	movs	r2, #1
 8005702:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2201      	movs	r2, #1
 800570a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800571a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800571e:	4618      	mov	r0, r3
 8005720:	3748      	adds	r7, #72	@ 0x48
 8005722:	46bd      	mov	sp, r7
 8005724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005728:	03d09000 	.word	0x03d09000
 800572c:	003d0900 	.word	0x003d0900
 8005730:	08008e84 	.word	0x08008e84

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b098      	sub	sp, #96	@ 0x60
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005888:	f7fb fba2 	bl	8000fd0 <HAL_GetTick>
 800588c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d12f      	bne.n	80058fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f88e 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d022      	beq.n	80058fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e6      	bne.n	80058b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e063      	b.n	80059c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d149      	bne.n	800599e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f857 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03c      	beq.n	800599e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	623b      	str	r3, [r7, #32]
   return(result);
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
 8005944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	60fb      	str	r3, [r7, #12]
   return(result);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005976:	61fa      	str	r2, [r7, #28]
 8005978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	69b9      	ldr	r1, [r7, #24]
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	617b      	str	r3, [r7, #20]
   return(result);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e5      	bne.n	8005956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e012      	b.n	80059c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3758      	adds	r7, #88	@ 0x58
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059dc:	e04f      	b.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e4:	d04b      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fb faf3 	bl	8000fd0 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <UART_WaitOnFlagUntilTimeout+0x30>
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e04e      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d037      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b80      	cmp	r3, #128	@ 0x80
 8005a12:	d034      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d031      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d110      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f839 	bl	8005aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e029      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a58:	d111      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f81f 	bl	8005aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e00f      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d0a0      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b095      	sub	sp, #84	@ 0x54
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b70 <UART_EndRxTransfer+0xc8>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d118      	bne.n	8005b50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b64:	bf00      	nop
 8005b66:	3754      	adds	r7, #84	@ 0x54
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	effffffe 	.word	0xeffffffe

08005b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e027      	b.n	8005bda <HAL_UARTEx_DisableFifoMode+0x66>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	@ 0x24
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e02d      	b.n	8005c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2224      	movs	r2, #36	@ 0x24
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f850 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e02d      	b.n	8005cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	@ 0x24
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f812 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d00:	e031      	b.n	8005d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d02:	2310      	movs	r3, #16
 8005d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d06:	2310      	movs	r3, #16
 8005d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	0e5b      	lsrs	r3, r3, #25
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	0f5b      	lsrs	r3, r3, #29
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	7b3a      	ldrb	r2, [r7, #12]
 8005d2e:	4911      	ldr	r1, [pc, #68]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d30:	5c8a      	ldrb	r2, [r1, r2]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d36:	7b3a      	ldrb	r2, [r7, #12]
 8005d38:	490f      	ldr	r1, [pc, #60]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	7b7a      	ldrb	r2, [r7, #13]
 8005d4c:	4909      	ldr	r1, [pc, #36]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d4e:	5c8a      	ldrb	r2, [r1, r2]
 8005d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d54:	7b7a      	ldrb	r2, [r7, #13]
 8005d56:	4908      	ldr	r1, [pc, #32]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	08008e9c 	.word	0x08008e9c
 8005d78:	08008ea4 	.word	0x08008ea4

08005d7c <__NVIC_SetPriority>:
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	6039      	str	r1, [r7, #0]
 8005d86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	db0a      	blt.n	8005da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	490c      	ldr	r1, [pc, #48]	@ (8005dc8 <__NVIC_SetPriority+0x4c>)
 8005d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d9a:	0112      	lsls	r2, r2, #4
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	440b      	add	r3, r1
 8005da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005da4:	e00a      	b.n	8005dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	4908      	ldr	r1, [pc, #32]	@ (8005dcc <__NVIC_SetPriority+0x50>)
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3b04      	subs	r3, #4
 8005db4:	0112      	lsls	r2, r2, #4
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	440b      	add	r3, r1
 8005dba:	761a      	strb	r2, [r3, #24]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	e000e100 	.word	0xe000e100
 8005dcc:	e000ed00 	.word	0xe000ed00

08005dd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005dd4:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <SysTick_Handler+0x1c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005dd8:	f001 fe20 	bl	8007a1c <xTaskGetSchedulerState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005de2:	f002 fd29 	bl	8008838 <xPortSysTickHandler>
  }
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	e000e010 	.word	0xe000e010

08005df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005df4:	2100      	movs	r1, #0
 8005df6:	f06f 0004 	mvn.w	r0, #4
 8005dfa:	f7ff ffbf 	bl	8005d7c <__NVIC_SetPriority>
#endif
}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0a:	f3ef 8305 	mrs	r3, IPSR
 8005e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e16:	f06f 0305 	mvn.w	r3, #5
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	e00c      	b.n	8005e38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <osKernelInitialize+0x44>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <osKernelInitialize+0x44>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	e002      	b.n	8005e38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e38:	687b      	ldr	r3, [r7, #4]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	2400012c 	.word	0x2400012c

08005e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e52:	f3ef 8305 	mrs	r3, IPSR
 8005e56:	603b      	str	r3, [r7, #0]
  return(result);
 8005e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e5e:	f06f 0305 	mvn.w	r3, #5
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e010      	b.n	8005e88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e66:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <osKernelStart+0x48>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d109      	bne.n	8005e82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e6e:	f7ff ffbf 	bl	8005df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e72:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <osKernelStart+0x48>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e78:	f001 f982 	bl	8007180 <vTaskStartScheduler>
      stat = osOK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e002      	b.n	8005e88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e88:	687b      	ldr	r3, [r7, #4]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2400012c 	.word	0x2400012c

08005e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	@ 0x38
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea8:	f3ef 8305 	mrs	r3, IPSR
 8005eac:	617b      	str	r3, [r7, #20]
  return(result);
 8005eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d17e      	bne.n	8005fb2 <osThreadNew+0x11a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d07b      	beq.n	8005fb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ebe:	2318      	movs	r3, #24
 8005ec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d045      	beq.n	8005f5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <osThreadNew+0x48>
        name = attr->name;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <osThreadNew+0x6e>
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b38      	cmp	r3, #56	@ 0x38
 8005ef8:	d805      	bhi.n	8005f06 <osThreadNew+0x6e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <osThreadNew+0x72>
        return (NULL);
 8005f06:	2300      	movs	r3, #0
 8005f08:	e054      	b.n	8005fb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <osThreadNew+0xa8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b5b      	cmp	r3, #91	@ 0x5b
 8005f28:	d90a      	bls.n	8005f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d006      	beq.n	8005f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <osThreadNew+0xa8>
        mem = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e010      	b.n	8005f62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <osThreadNew+0xca>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <osThreadNew+0xca>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <osThreadNew+0xca>
          mem = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e001      	b.n	8005f62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d110      	bne.n	8005f8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f70:	9202      	str	r2, [sp, #8]
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fe1a 	bl	8006bb8 <xTaskCreateStatic>
 8005f84:	4603      	mov	r3, r0
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	e013      	b.n	8005fb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d110      	bne.n	8005fb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f107 0310 	add.w	r3, r7, #16
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fe68 	bl	8006c78 <xTaskCreate>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d001      	beq.n	8005fb2 <osThreadNew+0x11a>
            hTask = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fb2:	693b      	ldr	r3, [r7, #16]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc4:	f3ef 8305 	mrs	r3, IPSR
 8005fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <osDelay+0x1c>
    stat = osErrorISR;
 8005fd0:	f06f 0305 	mvn.w	r3, #5
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e007      	b.n	8005fe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff8e 	bl	8006f04 <vTaskDelay>
    }
  }

  return (stat);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <vApplicationGetIdleTaskMemory+0x2c>)
 8006004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a06      	ldr	r2, [pc, #24]	@ (8006024 <vApplicationGetIdleTaskMemory+0x30>)
 800600a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2280      	movs	r2, #128	@ 0x80
 8006010:	601a      	str	r2, [r3, #0]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	24000130 	.word	0x24000130
 8006024:	2400018c 	.word	0x2400018c

08006028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a07      	ldr	r2, [pc, #28]	@ (8006054 <vApplicationGetTimerTaskMemory+0x2c>)
 8006038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a06      	ldr	r2, [pc, #24]	@ (8006058 <vApplicationGetTimerTaskMemory+0x30>)
 800603e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006046:	601a      	str	r2, [r3, #0]
}
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	2400038c 	.word	0x2400038c
 8006058:	240003e8 	.word	0x240003e8

0800605c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 0208 	add.w	r2, r3, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f103 0208 	add.w	r2, r3, #8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f103 0208 	add.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006114:	d103      	bne.n	800611e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e00c      	b.n	8006138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3308      	adds	r3, #8
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <vListInsert+0x2e>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d2f6      	bcs.n	8006126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6892      	ldr	r2, [r2, #8]
 8006186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d103      	bne.n	80061a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	1e5a      	subs	r2, r3, #1
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <xQueueGenericReset+0x2c>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60bb      	str	r3, [r7, #8]
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061f0:	f002 fa92 	bl	8008718 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	3b01      	subs	r3, #1
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	22ff      	movs	r2, #255	@ 0xff
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	22ff      	movs	r2, #255	@ 0xff
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d114      	bne.n	8006270 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01a      	beq.n	8006284 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3310      	adds	r3, #16
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fa22 	bl	800769c <xTaskRemoveFromEventList>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800625e:	4b0d      	ldr	r3, [pc, #52]	@ (8006294 <xQueueGenericReset+0xd0>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e009      	b.n	8006284 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3310      	adds	r3, #16
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fef1 	bl	800605c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3324      	adds	r3, #36	@ 0x24
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff feec 	bl	800605c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006284:	f002 fa7a 	bl	800877c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006288:	2301      	movs	r3, #1
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	@ 0x38
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10b      	bne.n	80062e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	e7fd      	b.n	80062de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <xQueueGenericCreateStatic+0x56>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <xQueueGenericCreateStatic+0x5a>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericCreateStatic+0x5c>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <xQueueGenericCreateStatic+0x84>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <xQueueGenericCreateStatic+0x88>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <xQueueGenericCreateStatic+0x8a>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61fb      	str	r3, [r7, #28]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800633e:	2350      	movs	r3, #80	@ 0x50
 8006340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d00b      	beq.n	8006360 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	61bb      	str	r3, [r7, #24]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00d      	beq.n	8006388 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006374:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f805 	bl	8006392 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800638a:	4618      	mov	r0, r3
 800638c:	3730      	adds	r7, #48	@ 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e002      	b.n	80063b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063c0:	2101      	movs	r1, #1
 80063c2:	69b8      	ldr	r0, [r7, #24]
 80063c4:	f7ff fefe 	bl	80061c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	@ 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <xQueueGenericSend+0x34>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <xQueueGenericSend+0x42>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueGenericSend+0x46>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueGenericSend+0x48>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xQueueGenericSend+0x64>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x72>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0x76>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0x78>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <xQueueGenericSend+0x94>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646c:	f001 fad6 	bl	8007a1c <xTaskGetSchedulerState>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <xQueueGenericSend+0xa4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <xQueueGenericSend+0xa8>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <xQueueGenericSend+0xaa>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <xQueueGenericSend+0xc6>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61fb      	str	r3, [r7, #28]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800649e:	f002 f93b 	bl	8008718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <xQueueGenericSend+0xdc>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d129      	bne.n	8006508 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ba:	f000 fa0f 	bl	80068dc <prvCopyDataToQueue>
 80064be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d010      	beq.n	80064ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	3324      	adds	r3, #36	@ 0x24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f8e5 	bl	800769c <xTaskRemoveFromEventList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064d8:	4b3f      	ldr	r3, [pc, #252]	@ (80065d8 <xQueueGenericSend+0x200>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	e00a      	b.n	8006500 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064f0:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <xQueueGenericSend+0x200>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006500:	f002 f93c 	bl	800877c <vPortExitCritical>
				return pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	e063      	b.n	80065d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800650e:	f002 f935 	bl	800877c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006512:	2300      	movs	r3, #0
 8006514:	e05c      	b.n	80065d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f91f 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800652a:	f002 f927 	bl	800877c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800652e:	f000 fe8f 	bl	8007250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006532:	f002 f8f1 	bl	8008718 <vPortEnterCritical>
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653c:	b25b      	sxtb	r3, r3
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006542:	d103      	bne.n	800654c <xQueueGenericSend+0x174>
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006552:	b25b      	sxtb	r3, r3
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006558:	d103      	bne.n	8006562 <xQueueGenericSend+0x18a>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006562:	f002 f90b 	bl	800877c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006566:	1d3a      	adds	r2, r7, #4
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f90e 	bl	8007790 <xTaskCheckForTimeOut>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d124      	bne.n	80065c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800657a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657c:	f000 faa6 	bl	8006acc <prvIsQueueFull>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d018      	beq.n	80065b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	3310      	adds	r3, #16
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f001 f832 	bl	80075f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006596:	f000 fa31 	bl	80069fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800659a:	f000 fe67 	bl	800726c <xTaskResumeAll>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f af7c 	bne.w	800649e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065a6:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <xQueueGenericSend+0x200>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	e772      	b.n	800649e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ba:	f000 fa1f 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065be:	f000 fe55 	bl	800726c <xTaskResumeAll>
 80065c2:	e76c      	b.n	800649e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065c6:	f000 fa19 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ca:	f000 fe4f 	bl	800726c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3738      	adds	r7, #56	@ 0x38
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b090      	sub	sp, #64	@ 0x40
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <xQueueGenericSendFromISR+0x3e>
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericSendFromISR+0x42>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericSendFromISR+0x44>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d103      	bne.n	800664a <xQueueGenericSendFromISR+0x6e>
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <xQueueGenericSendFromISR+0x72>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueGenericSendFromISR+0x74>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	623b      	str	r3, [r7, #32]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800666c:	f002 f934 	bl	80088d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006670:	f3ef 8211 	mrs	r2, BASEPRI
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	61fa      	str	r2, [r7, #28]
 8006686:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006688:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <xQueueGenericSendFromISR+0xc2>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d12f      	bne.n	80066fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066b4:	f000 f912 	bl	80068dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066c0:	d112      	bne.n	80066e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d016      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	3324      	adds	r3, #36	@ 0x24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ffe4 	bl	800769c <xTaskRemoveFromEventList>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e007      	b.n	80066f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	b25a      	sxtb	r2, r3
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066f8:	2301      	movs	r3, #1
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066fc:	e001      	b.n	8006702 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006704:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800670c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800670e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006710:	4618      	mov	r0, r3
 8006712:	3740      	adds	r7, #64	@ 0x40
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <xQueueReceive+0x32>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	623b      	str	r3, [r7, #32]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <xQueueReceive+0x40>
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <xQueueReceive+0x44>
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <xQueueReceive+0x46>
 800675c:	2300      	movs	r3, #0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <xQueueReceive+0x62>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fb      	str	r3, [r7, #28]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800677a:	f001 f94f 	bl	8007a1c <xTaskGetSchedulerState>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <xQueueReceive+0x72>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <xQueueReceive+0x76>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueReceive+0x78>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <xQueueReceive+0x94>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	61bb      	str	r3, [r7, #24]
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ac:	f001 ffb4 	bl	8008718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01f      	beq.n	80067fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c0:	f000 f8f6 	bl	80069b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00f      	beq.n	80067f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	3310      	adds	r3, #16
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 ff5f 	bl	800769c <xTaskRemoveFromEventList>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067e4:	4b3c      	ldr	r3, [pc, #240]	@ (80068d8 <xQueueReceive+0x1c0>)
 80067e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067f4:	f001 ffc2 	bl	800877c <vPortExitCritical>
				return pdPASS;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e069      	b.n	80068d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006802:	f001 ffbb 	bl	800877c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006806:	2300      	movs	r3, #0
 8006808:	e062      	b.n	80068d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006810:	f107 0310 	add.w	r3, r7, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f000 ffa5 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800681e:	f001 ffad 	bl	800877c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006822:	f000 fd15 	bl	8007250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006826:	f001 ff77 	bl	8008718 <vPortEnterCritical>
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006830:	b25b      	sxtb	r3, r3
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006836:	d103      	bne.n	8006840 <xQueueReceive+0x128>
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006846:	b25b      	sxtb	r3, r3
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800684c:	d103      	bne.n	8006856 <xQueueReceive+0x13e>
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006856:	f001 ff91 	bl	800877c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685a:	1d3a      	adds	r2, r7, #4
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 ff94 	bl	8007790 <xTaskCheckForTimeOut>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d123      	bne.n	80068b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800686e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006870:	f000 f916 	bl	8006aa0 <prvIsQueueEmpty>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	3324      	adds	r3, #36	@ 0x24
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 feb8 	bl	80075f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688a:	f000 f8b7 	bl	80069fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800688e:	f000 fced 	bl	800726c <xTaskResumeAll>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d189      	bne.n	80067ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <xQueueReceive+0x1c0>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	e780      	b.n	80067ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068ac:	f000 f8a6 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b0:	f000 fcdc 	bl	800726c <xTaskResumeAll>
 80068b4:	e77a      	b.n	80067ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b8:	f000 f8a0 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068bc:	f000 fcd6 	bl	800726c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c2:	f000 f8ed 	bl	8006aa0 <prvIsQueueEmpty>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f43f af6f 	beq.w	80067ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3730      	adds	r7, #48	@ 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d14d      	bne.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f8a6 	bl	8007a58 <xTaskPriorityDisinherit>
 800690c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	e043      	b.n	800699e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d119      	bne.n	8006950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	461a      	mov	r2, r3
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	f002 fa32 	bl	8008d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d32b      	bcc.n	800699e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	e026      	b.n	800699e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68d8      	ldr	r0, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	461a      	mov	r2, r3
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	f002 fa18 	bl	8008d90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d207      	bcs.n	800698c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	425b      	negs	r3, r3
 8006986:	441a      	add	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d105      	bne.n	800699e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d303      	bcc.n	80069e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	461a      	mov	r2, r3
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f002 f9ce 	bl	8008d90 <memcpy>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 fe88 	bl	8008718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	e011      	b.n	8006a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	@ 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fe3c 	bl	800769c <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2a:	f000 ff15 	bl	8007858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dce9      	bgt.n	8006a12 <prvUnlockQueue+0x16>
 8006a3e:	e000      	b.n	8006a42 <prvUnlockQueue+0x46>
					break;
 8006a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	22ff      	movs	r2, #255	@ 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 fe97 	bl	800877c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4e:	f001 fe63 	bl	8008718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	e011      	b.n	8006a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fe17 	bl	800769c <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a74:	f000 fef0 	bl	8007858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dce9      	bgt.n	8006a5c <prvUnlockQueue+0x60>
 8006a88:	e000      	b.n	8006a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22ff      	movs	r2, #255	@ 0xff
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 fe72 	bl	800877c <vPortExitCritical>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f001 fe36 	bl	8008718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e001      	b.n	8006abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 fe5d 	bl	800877c <vPortExitCritical>

	return xReturn;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 fe20 	bl	8008718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 fe45 	bl	800877c <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e014      	b.n	8006b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b18:	490c      	ldr	r1, [pc, #48]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b22:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b2e:	e006      	b.n	8006b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d9e7      	bls.n	8006b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	240007e8 	.word	0x240007e8

08006b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b60:	f001 fdda 	bl	8008718 <vPortEnterCritical>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b70:	d103      	bne.n	8006b7a <vQueueWaitForMessageRestricted+0x2a>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b86:	d103      	bne.n	8006b90 <vQueueWaitForMessageRestricted+0x40>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b90:	f001 fdf4 	bl	800877c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3324      	adds	r3, #36	@ 0x24
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd4d 	bl	8007644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f7ff ff26 	bl	80069fc <prvUnlockQueue>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08e      	sub	sp, #56	@ 0x38
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	623b      	str	r3, [r7, #32]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61fb      	str	r3, [r7, #28]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c02:	235c      	movs	r3, #92	@ 0x5c
 8006c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c0a:	d00b      	beq.n	8006c24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	e7fd      	b.n	8006c20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01e      	beq.n	8006c6a <xTaskCreateStatic+0xb2>
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01b      	beq.n	8006c6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c44:	2300      	movs	r3, #0
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f850 	bl	8006d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c64:	f000 f8de 	bl	8006e24 <prvAddNewTaskToReadyList>
 8006c68:	e001      	b.n	8006c6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c6e:	697b      	ldr	r3, [r7, #20]
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3728      	adds	r7, #40	@ 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	@ 0x30
 8006c7c:	af04      	add	r7, sp, #16
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fe65 	bl	800895c <pvPortMalloc>
 8006c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c9a:	205c      	movs	r0, #92	@ 0x5c
 8006c9c:	f001 fe5e 	bl	800895c <pvPortMalloc>
 8006ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cae:	e005      	b.n	8006cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb0:	6978      	ldr	r0, [r7, #20]
 8006cb2:	f001 ff21 	bl	8008af8 <vPortFree>
 8006cb6:	e001      	b.n	8006cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9303      	str	r3, [sp, #12]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f80e 	bl	8006d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ce6:	69f8      	ldr	r0, [r7, #28]
 8006ce8:	f000 f89c 	bl	8006e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cec:	2301      	movs	r3, #1
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e002      	b.n	8006cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b088      	sub	sp, #32
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	21a5      	movs	r1, #165	@ 0xa5
 8006d1c:	f002 f80c 	bl	8008d38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006d2a:	440b      	add	r3, r1
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	617b      	str	r3, [r7, #20]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01f      	beq.n	8006da2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e012      	b.n	8006d8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	7819      	ldrb	r1, [r3, #0]
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	3334      	adds	r3, #52	@ 0x34
 8006d78:	460a      	mov	r2, r1
 8006d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9e9      	bls.n	8006d68 <prvInitialiseNewTask+0x66>
 8006d94:	e000      	b.n	8006d98 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da0:	e003      	b.n	8006daa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	2b37      	cmp	r3, #55	@ 0x37
 8006dae:	d901      	bls.n	8006db4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db0:	2337      	movs	r3, #55	@ 0x37
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006db8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f966 	bl	800609c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	3318      	adds	r3, #24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff f961 	bl	800609c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68f9      	ldr	r1, [r7, #12]
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f001 fb5a 	bl	80084bc <pxPortInitialiseStack>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e2c:	f001 fc74 	bl	8008718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e42:	4a2a      	ldr	r2, [pc, #168]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e48:	4b27      	ldr	r3, [pc, #156]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d110      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e50:	f000 fd26 	bl	80078a0 <prvInitialiseTaskLists>
 8006e54:	e00d      	b.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e56:	4b26      	ldr	r3, [pc, #152]	@ (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e5e:	4b23      	ldr	r3, [pc, #140]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d802      	bhi.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e72:	4b20      	ldr	r3, [pc, #128]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <prvAddNewTaskToReadyList+0xd4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d903      	bls.n	8006e98 <prvAddNewTaskToReadyList+0x74>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	4a18      	ldr	r2, [pc, #96]	@ (8006ef8 <prvAddNewTaskToReadyList+0xd4>)
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <prvAddNewTaskToReadyList+0xd8>)
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7ff f901 	bl	80060b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eb4:	f001 fc62 	bl	800877c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d207      	bcs.n	8006ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ece:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <prvAddNewTaskToReadyList+0xdc>)
 8006ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	24000cfc 	.word	0x24000cfc
 8006eec:	24000828 	.word	0x24000828
 8006ef0:	24000d08 	.word	0x24000d08
 8006ef4:	24000d18 	.word	0x24000d18
 8006ef8:	24000d04 	.word	0x24000d04
 8006efc:	2400082c 	.word	0x2400082c
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <vTaskDelay+0x64>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <vTaskDelay+0x32>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60bb      	str	r3, [r7, #8]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f36:	f000 f98b 	bl	8007250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 ff0f 	bl	8007d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f42:	f000 f993 	bl	800726c <xTaskResumeAll>
 8006f46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f4e:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <vTaskDelay+0x68>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	24000d24 	.word	0x24000d24
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f78:	f001 fbce 	bl	8008718 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <vTaskSuspend+0x18>
 8006f82:	4b30      	ldr	r3, [pc, #192]	@ (8007044 <vTaskSuspend+0xd4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	e000      	b.n	8006f8a <vTaskSuspend+0x1a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff f8ed 	bl	8006170 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3318      	adds	r3, #24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff f8e4 	bl	8006170 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4826      	ldr	r0, [pc, #152]	@ (8007048 <vTaskSuspend+0xd8>)
 8006fb0:	f7ff f881 	bl	80060b6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d103      	bne.n	8006fc8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006fc8:	f001 fbd8 	bl	800877c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800704c <vTaskSuspend+0xdc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006fd4:	f001 fba0 	bl	8008718 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006fd8:	f000 fd00 	bl	80079dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006fdc:	f001 fbce 	bl	800877c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006fe0:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <vTaskSuspend+0xd4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d128      	bne.n	800703c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006fea:	4b18      	ldr	r3, [pc, #96]	@ (800704c <vTaskSuspend+0xdc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006ff2:	4b17      	ldr	r3, [pc, #92]	@ (8007050 <vTaskSuspend+0xe0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <vTaskSuspend+0xa2>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	60bb      	str	r3, [r7, #8]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007012:	4b10      	ldr	r3, [pc, #64]	@ (8007054 <vTaskSuspend+0xe4>)
 8007014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007022:	e00b      	b.n	800703c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007024:	4b08      	ldr	r3, [pc, #32]	@ (8007048 <vTaskSuspend+0xd8>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	4b0b      	ldr	r3, [pc, #44]	@ (8007058 <vTaskSuspend+0xe8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d103      	bne.n	8007038 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <vTaskSuspend+0xd4>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
	}
 8007036:	e001      	b.n	800703c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8007038:	f000 fa80 	bl	800753c <vTaskSwitchContext>
	}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	24000828 	.word	0x24000828
 8007048:	24000ce8 	.word	0x24000ce8
 800704c:	24000d08 	.word	0x24000d08
 8007050:	24000d24 	.word	0x24000d24
 8007054:	e000ed04 	.word	0xe000ed04
 8007058:	24000cfc 	.word	0x24000cfc

0800705c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60fb      	str	r3, [r7, #12]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4a0a      	ldr	r2, [pc, #40]	@ (80070b8 <prvTaskIsTaskSuspended+0x5c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10a      	bne.n	80070aa <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	4a08      	ldr	r2, [pc, #32]	@ (80070bc <prvTaskIsTaskSuspended+0x60>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d005      	beq.n	80070aa <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070aa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	24000ce8 	.word	0x24000ce8
 80070bc:	24000cbc 	.word	0x24000cbc

080070c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <vTaskResume+0x2a>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	60bb      	str	r3, [r7, #8]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80070ea:	4b21      	ldr	r3, [pc, #132]	@ (8007170 <vTaskResume+0xb0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d038      	beq.n	8007166 <vTaskResume+0xa6>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d035      	beq.n	8007166 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80070fa:	f001 fb0d 	bl	8008718 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff ffac 	bl	800705c <prvTaskIsTaskSuspended>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d02b      	beq.n	8007162 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff f82e 	bl	8006170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007118:	4b16      	ldr	r3, [pc, #88]	@ (8007174 <vTaskResume+0xb4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d903      	bls.n	8007128 <vTaskResume+0x68>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007124:	4a13      	ldr	r2, [pc, #76]	@ (8007174 <vTaskResume+0xb4>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a10      	ldr	r2, [pc, #64]	@ (8007178 <vTaskResume+0xb8>)
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7fe ffb9 	bl	80060b6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007148:	4b09      	ldr	r3, [pc, #36]	@ (8007170 <vTaskResume+0xb0>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	429a      	cmp	r2, r3
 8007150:	d307      	bcc.n	8007162 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007152:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <vTaskResume+0xbc>)
 8007154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007162:	f001 fb0b 	bl	800877c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	24000828 	.word	0x24000828
 8007174:	24000d04 	.word	0x24000d04
 8007178:	2400082c 	.word	0x2400082c
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	@ 0x28
 8007184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800718e:	463a      	mov	r2, r7
 8007190:	1d39      	adds	r1, r7, #4
 8007192:	f107 0308 	add.w	r3, r7, #8
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe ff2c 	bl	8005ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	9202      	str	r2, [sp, #8]
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	2300      	movs	r3, #0
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	460a      	mov	r2, r1
 80071ae:	4922      	ldr	r1, [pc, #136]	@ (8007238 <vTaskStartScheduler+0xb8>)
 80071b0:	4822      	ldr	r0, [pc, #136]	@ (800723c <vTaskStartScheduler+0xbc>)
 80071b2:	f7ff fd01 	bl	8006bb8 <xTaskCreateStatic>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a21      	ldr	r2, [pc, #132]	@ (8007240 <vTaskStartScheduler+0xc0>)
 80071ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071bc:	4b20      	ldr	r3, [pc, #128]	@ (8007240 <vTaskStartScheduler+0xc0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e001      	b.n	80071ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d102      	bne.n	80071da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071d4:	f000 fe18 	bl	8007e08 <xTimerCreateTimerTask>
 80071d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d116      	bne.n	800720e <vTaskStartScheduler+0x8e>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	613b      	str	r3, [r7, #16]
}
 80071f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071f4:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <vTaskStartScheduler+0xc4>)
 80071f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071fc:	4b12      	ldr	r3, [pc, #72]	@ (8007248 <vTaskStartScheduler+0xc8>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <vTaskStartScheduler+0xcc>)
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007208:	f001 f9e2 	bl	80085d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800720c:	e00f      	b.n	800722e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007214:	d10b      	bne.n	800722e <vTaskStartScheduler+0xae>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <vTaskStartScheduler+0xaa>
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	08008e38 	.word	0x08008e38
 800723c:	08007871 	.word	0x08007871
 8007240:	24000d20 	.word	0x24000d20
 8007244:	24000d1c 	.word	0x24000d1c
 8007248:	24000d08 	.word	0x24000d08
 800724c:	24000d00 	.word	0x24000d00

08007250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007254:	4b04      	ldr	r3, [pc, #16]	@ (8007268 <vTaskSuspendAll+0x18>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	4a03      	ldr	r2, [pc, #12]	@ (8007268 <vTaskSuspendAll+0x18>)
 800725c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800725e:	bf00      	nop
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	24000d24 	.word	0x24000d24

0800726c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800727a:	4b42      	ldr	r3, [pc, #264]	@ (8007384 <xTaskResumeAll+0x118>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <xTaskResumeAll+0x2e>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	603b      	str	r3, [r7, #0]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800729a:	f001 fa3d 	bl	8008718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800729e:	4b39      	ldr	r3, [pc, #228]	@ (8007384 <xTaskResumeAll+0x118>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4a37      	ldr	r2, [pc, #220]	@ (8007384 <xTaskResumeAll+0x118>)
 80072a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a8:	4b36      	ldr	r3, [pc, #216]	@ (8007384 <xTaskResumeAll+0x118>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d162      	bne.n	8007376 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072b0:	4b35      	ldr	r3, [pc, #212]	@ (8007388 <xTaskResumeAll+0x11c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05e      	beq.n	8007376 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072b8:	e02f      	b.n	800731a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ba:	4b34      	ldr	r3, [pc, #208]	@ (800738c <xTaskResumeAll+0x120>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3318      	adds	r3, #24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe ff52 	bl	8006170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe ff4d 	bl	8006170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072da:	4b2d      	ldr	r3, [pc, #180]	@ (8007390 <xTaskResumeAll+0x124>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d903      	bls.n	80072ea <xTaskResumeAll+0x7e>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007390 <xTaskResumeAll+0x124>)
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4a27      	ldr	r2, [pc, #156]	@ (8007394 <xTaskResumeAll+0x128>)
 80072f8:	441a      	add	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7fe fed8 	bl	80060b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730a:	4b23      	ldr	r3, [pc, #140]	@ (8007398 <xTaskResumeAll+0x12c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	429a      	cmp	r2, r3
 8007312:	d302      	bcc.n	800731a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007314:	4b21      	ldr	r3, [pc, #132]	@ (800739c <xTaskResumeAll+0x130>)
 8007316:	2201      	movs	r2, #1
 8007318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800731a:	4b1c      	ldr	r3, [pc, #112]	@ (800738c <xTaskResumeAll+0x120>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1cb      	bne.n	80072ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007328:	f000 fb58 	bl	80079dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800732c:	4b1c      	ldr	r3, [pc, #112]	@ (80073a0 <xTaskResumeAll+0x134>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d010      	beq.n	800735a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007338:	f000 f846 	bl	80073c8 <xTaskIncrementTick>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007342:	4b16      	ldr	r3, [pc, #88]	@ (800739c <xTaskResumeAll+0x130>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3b01      	subs	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f1      	bne.n	8007338 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007354:	4b12      	ldr	r3, [pc, #72]	@ (80073a0 <xTaskResumeAll+0x134>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800735a:	4b10      	ldr	r3, [pc, #64]	@ (800739c <xTaskResumeAll+0x130>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007362:	2301      	movs	r3, #1
 8007364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007366:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <xTaskResumeAll+0x138>)
 8007368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007376:	f001 fa01 	bl	800877c <vPortExitCritical>

	return xAlreadyYielded;
 800737a:	68bb      	ldr	r3, [r7, #8]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	24000d24 	.word	0x24000d24
 8007388:	24000cfc 	.word	0x24000cfc
 800738c:	24000cbc 	.word	0x24000cbc
 8007390:	24000d04 	.word	0x24000d04
 8007394:	2400082c 	.word	0x2400082c
 8007398:	24000828 	.word	0x24000828
 800739c:	24000d10 	.word	0x24000d10
 80073a0:	24000d0c 	.word	0x24000d0c
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073ae:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <xTaskGetTickCount+0x1c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073b4:	687b      	ldr	r3, [r7, #4]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	24000d00 	.word	0x24000d00

080073c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007510 <xTaskIncrementTick+0x148>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 8090 	bne.w	80074fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007514 <xTaskIncrementTick+0x14c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007514 <xTaskIncrementTick+0x14c>)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d121      	bne.n	8007434 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80073f0:	4b49      	ldr	r3, [pc, #292]	@ (8007518 <xTaskIncrementTick+0x150>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <xTaskIncrementTick+0x4a>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	603b      	str	r3, [r7, #0]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xTaskIncrementTick+0x46>
 8007412:	4b41      	ldr	r3, [pc, #260]	@ (8007518 <xTaskIncrementTick+0x150>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	4b40      	ldr	r3, [pc, #256]	@ (800751c <xTaskIncrementTick+0x154>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a3e      	ldr	r2, [pc, #248]	@ (8007518 <xTaskIncrementTick+0x150>)
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	4a3e      	ldr	r2, [pc, #248]	@ (800751c <xTaskIncrementTick+0x154>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	4b3e      	ldr	r3, [pc, #248]	@ (8007520 <xTaskIncrementTick+0x158>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	4a3c      	ldr	r2, [pc, #240]	@ (8007520 <xTaskIncrementTick+0x158>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	f000 fad4 	bl	80079dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007434:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <xTaskIncrementTick+0x15c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	429a      	cmp	r2, r3
 800743c:	d349      	bcc.n	80074d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800743e:	4b36      	ldr	r3, [pc, #216]	@ (8007518 <xTaskIncrementTick+0x150>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007448:	4b36      	ldr	r3, [pc, #216]	@ (8007524 <xTaskIncrementTick+0x15c>)
 800744a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800744e:	601a      	str	r2, [r3, #0]
					break;
 8007450:	e03f      	b.n	80074d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	4b31      	ldr	r3, [pc, #196]	@ (8007518 <xTaskIncrementTick+0x150>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d203      	bcs.n	8007472 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800746a:	4a2e      	ldr	r2, [pc, #184]	@ (8007524 <xTaskIncrementTick+0x15c>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007470:	e02f      	b.n	80074d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fe7a 	bl	8006170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	3318      	adds	r3, #24
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fe71 	bl	8006170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007492:	4b25      	ldr	r3, [pc, #148]	@ (8007528 <xTaskIncrementTick+0x160>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d903      	bls.n	80074a2 <xTaskIncrementTick+0xda>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	4a22      	ldr	r2, [pc, #136]	@ (8007528 <xTaskIncrementTick+0x160>)
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a1f      	ldr	r2, [pc, #124]	@ (800752c <xTaskIncrementTick+0x164>)
 80074b0:	441a      	add	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe fdfc 	bl	80060b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <xTaskIncrementTick+0x168>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3b8      	bcc.n	800743e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074d0:	e7b5      	b.n	800743e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074d2:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <xTaskIncrementTick+0x168>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d8:	4914      	ldr	r1, [pc, #80]	@ (800752c <xTaskIncrementTick+0x164>)
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d901      	bls.n	80074ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074ee:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <xTaskIncrementTick+0x16c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e004      	b.n	8007506 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007538 <xTaskIncrementTick+0x170>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	4a0d      	ldr	r2, [pc, #52]	@ (8007538 <xTaskIncrementTick+0x170>)
 8007504:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007506:	697b      	ldr	r3, [r7, #20]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	24000d24 	.word	0x24000d24
 8007514:	24000d00 	.word	0x24000d00
 8007518:	24000cb4 	.word	0x24000cb4
 800751c:	24000cb8 	.word	0x24000cb8
 8007520:	24000d14 	.word	0x24000d14
 8007524:	24000d1c 	.word	0x24000d1c
 8007528:	24000d04 	.word	0x24000d04
 800752c:	2400082c 	.word	0x2400082c
 8007530:	24000828 	.word	0x24000828
 8007534:	24000d10 	.word	0x24000d10
 8007538:	24000d0c 	.word	0x24000d0c

0800753c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007542:	4b28      	ldr	r3, [pc, #160]	@ (80075e4 <vTaskSwitchContext+0xa8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800754a:	4b27      	ldr	r3, [pc, #156]	@ (80075e8 <vTaskSwitchContext+0xac>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007550:	e042      	b.n	80075d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007552:	4b25      	ldr	r3, [pc, #148]	@ (80075e8 <vTaskSwitchContext+0xac>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007558:	4b24      	ldr	r3, [pc, #144]	@ (80075ec <vTaskSwitchContext+0xb0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e011      	b.n	8007584 <vTaskSwitchContext+0x48>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <vTaskSwitchContext+0x42>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	607b      	str	r3, [r7, #4]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <vTaskSwitchContext+0x3e>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b01      	subs	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	491a      	ldr	r1, [pc, #104]	@ (80075f0 <vTaskSwitchContext+0xb4>)
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0e3      	beq.n	8007560 <vTaskSwitchContext+0x24>
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4a13      	ldr	r2, [pc, #76]	@ (80075f0 <vTaskSwitchContext+0xb4>)
 80075a4:	4413      	add	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	3308      	adds	r3, #8
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d104      	bne.n	80075c8 <vTaskSwitchContext+0x8c>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	605a      	str	r2, [r3, #4]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	4a09      	ldr	r2, [pc, #36]	@ (80075f4 <vTaskSwitchContext+0xb8>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	4a06      	ldr	r2, [pc, #24]	@ (80075ec <vTaskSwitchContext+0xb0>)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6013      	str	r3, [r2, #0]
}
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	24000d24 	.word	0x24000d24
 80075e8:	24000d10 	.word	0x24000d10
 80075ec:	24000d04 	.word	0x24000d04
 80075f0:	2400082c 	.word	0x2400082c
 80075f4:	24000828 	.word	0x24000828

080075f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	60fb      	str	r3, [r7, #12]
}
 800761a:	bf00      	nop
 800761c:	bf00      	nop
 800761e:	e7fd      	b.n	800761c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007620:	4b07      	ldr	r3, [pc, #28]	@ (8007640 <vTaskPlaceOnEventList+0x48>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3318      	adds	r3, #24
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fe fd68 	bl	80060fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800762e:	2101      	movs	r1, #1
 8007630:	6838      	ldr	r0, [r7, #0]
 8007632:	f000 fb95 	bl	8007d60 <prvAddCurrentTaskToDelayedList>
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	24000828 	.word	0x24000828

08007644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	617b      	str	r3, [r7, #20]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <vTaskPlaceOnEventListRestricted+0x54>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3318      	adds	r3, #24
 8007674:	4619      	mov	r1, r3
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f7fe fd1d 	bl	80060b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007686:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	68b8      	ldr	r0, [r7, #8]
 800768c:	f000 fb68 	bl	8007d60 <prvAddCurrentTaskToDelayedList>
	}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	24000828 	.word	0x24000828

0800769c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3318      	adds	r3, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fd4e 	bl	8006170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <xTaskRemoveFromEventList+0xb0>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11d      	bne.n	8007718 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe fd45 	bl	8006170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ea:	4b19      	ldr	r3, [pc, #100]	@ (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d903      	bls.n	80076fa <xTaskRemoveFromEventList+0x5e>
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	4a16      	ldr	r2, [pc, #88]	@ (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a13      	ldr	r2, [pc, #76]	@ (8007754 <xTaskRemoveFromEventList+0xb8>)
 8007708:	441a      	add	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fe fcd0 	bl	80060b6 <vListInsertEnd>
 8007716:	e005      	b.n	8007724 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3318      	adds	r3, #24
 800771c:	4619      	mov	r1, r3
 800771e:	480e      	ldr	r0, [pc, #56]	@ (8007758 <xTaskRemoveFromEventList+0xbc>)
 8007720:	f7fe fcc9 	bl	80060b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007728:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <xTaskRemoveFromEventList+0xc0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	429a      	cmp	r2, r3
 8007730:	d905      	bls.n	800773e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007736:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <xTaskRemoveFromEventList+0xc4>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e001      	b.n	8007742 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	24000d24 	.word	0x24000d24
 8007750:	24000d04 	.word	0x24000d04
 8007754:	2400082c 	.word	0x2400082c
 8007758:	24000cbc 	.word	0x24000cbc
 800775c:	24000828 	.word	0x24000828
 8007760:	24000d10 	.word	0x24000d10

08007764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800776c:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <vTaskInternalSetTimeOutState+0x24>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <vTaskInternalSetTimeOutState+0x28>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	24000d14 	.word	0x24000d14
 800778c:	24000d00 	.word	0x24000d00

08007790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	60fb      	str	r3, [r7, #12]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80077d6:	f000 ff9f 	bl	8008718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077da:	4b1d      	ldr	r3, [pc, #116]	@ (8007850 <xTaskCheckForTimeOut+0xc0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077f2:	d102      	bne.n	80077fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e023      	b.n	8007842 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4b15      	ldr	r3, [pc, #84]	@ (8007854 <xTaskCheckForTimeOut+0xc4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d007      	beq.n	8007816 <xTaskCheckForTimeOut+0x86>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e015      	b.n	8007842 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	429a      	cmp	r2, r3
 800781e:	d20b      	bcs.n	8007838 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	1ad2      	subs	r2, r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff99 	bl	8007764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
 8007836:	e004      	b.n	8007842 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800783e:	2301      	movs	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f000 ff9b 	bl	800877c <vPortExitCritical>

	return xReturn;
 8007846:	69fb      	ldr	r3, [r7, #28]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	24000d00 	.word	0x24000d00
 8007854:	24000d14 	.word	0x24000d14

08007858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800785c:	4b03      	ldr	r3, [pc, #12]	@ (800786c <vTaskMissedYield+0x14>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
}
 8007862:	bf00      	nop
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	24000d10 	.word	0x24000d10

08007870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007878:	f000 f852 	bl	8007920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800787c:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <prvIdleTask+0x28>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d9f9      	bls.n	8007878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007884:	4b05      	ldr	r3, [pc, #20]	@ (800789c <prvIdleTask+0x2c>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007894:	e7f0      	b.n	8007878 <prvIdleTask+0x8>
 8007896:	bf00      	nop
 8007898:	2400082c 	.word	0x2400082c
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	e00c      	b.n	80078c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4a12      	ldr	r2, [pc, #72]	@ (8007900 <prvInitialiseTaskLists+0x60>)
 80078b8:	4413      	add	r3, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fbce 	bl	800605c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3301      	adds	r3, #1
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b37      	cmp	r3, #55	@ 0x37
 80078ca:	d9ef      	bls.n	80078ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078cc:	480d      	ldr	r0, [pc, #52]	@ (8007904 <prvInitialiseTaskLists+0x64>)
 80078ce:	f7fe fbc5 	bl	800605c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078d2:	480d      	ldr	r0, [pc, #52]	@ (8007908 <prvInitialiseTaskLists+0x68>)
 80078d4:	f7fe fbc2 	bl	800605c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078d8:	480c      	ldr	r0, [pc, #48]	@ (800790c <prvInitialiseTaskLists+0x6c>)
 80078da:	f7fe fbbf 	bl	800605c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078de:	480c      	ldr	r0, [pc, #48]	@ (8007910 <prvInitialiseTaskLists+0x70>)
 80078e0:	f7fe fbbc 	bl	800605c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078e4:	480b      	ldr	r0, [pc, #44]	@ (8007914 <prvInitialiseTaskLists+0x74>)
 80078e6:	f7fe fbb9 	bl	800605c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <prvInitialiseTaskLists+0x78>)
 80078ec:	4a05      	ldr	r2, [pc, #20]	@ (8007904 <prvInitialiseTaskLists+0x64>)
 80078ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <prvInitialiseTaskLists+0x7c>)
 80078f2:	4a05      	ldr	r2, [pc, #20]	@ (8007908 <prvInitialiseTaskLists+0x68>)
 80078f4:	601a      	str	r2, [r3, #0]
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	2400082c 	.word	0x2400082c
 8007904:	24000c8c 	.word	0x24000c8c
 8007908:	24000ca0 	.word	0x24000ca0
 800790c:	24000cbc 	.word	0x24000cbc
 8007910:	24000cd0 	.word	0x24000cd0
 8007914:	24000ce8 	.word	0x24000ce8
 8007918:	24000cb4 	.word	0x24000cb4
 800791c:	24000cb8 	.word	0x24000cb8

08007920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007926:	e019      	b.n	800795c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007928:	f000 fef6 	bl	8008718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792c:	4b10      	ldr	r3, [pc, #64]	@ (8007970 <prvCheckTasksWaitingTermination+0x50>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fc19 	bl	8006170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <prvCheckTasksWaitingTermination+0x54>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3b01      	subs	r3, #1
 8007944:	4a0b      	ldr	r2, [pc, #44]	@ (8007974 <prvCheckTasksWaitingTermination+0x54>)
 8007946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007948:	4b0b      	ldr	r3, [pc, #44]	@ (8007978 <prvCheckTasksWaitingTermination+0x58>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	4a0a      	ldr	r2, [pc, #40]	@ (8007978 <prvCheckTasksWaitingTermination+0x58>)
 8007950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007952:	f000 ff13 	bl	800877c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f810 	bl	800797c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800795c:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <prvCheckTasksWaitingTermination+0x58>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e1      	bne.n	8007928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	24000cd0 	.word	0x24000cd0
 8007974:	24000cfc 	.word	0x24000cfc
 8007978:	24000ce4 	.word	0x24000ce4

0800797c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800798a:	2b00      	cmp	r3, #0
 800798c:	d108      	bne.n	80079a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f8b0 	bl	8008af8 <vPortFree>
				vPortFree( pxTCB );
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f8ad 	bl	8008af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800799e:	e019      	b.n	80079d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d103      	bne.n	80079b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f8a4 	bl	8008af8 <vPortFree>
	}
 80079b0:	e010      	b.n	80079d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d00b      	beq.n	80079d4 <prvDeleteTCB+0x58>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60fb      	str	r3, [r7, #12]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <prvDeleteTCB+0x54>
	}
 80079d4:	bf00      	nop
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <prvResetNextTaskUnblockTime+0x38>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <prvResetNextTaskUnblockTime+0x3c>)
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079f4:	e008      	b.n	8007a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f6:	4b07      	ldr	r3, [pc, #28]	@ (8007a14 <prvResetNextTaskUnblockTime+0x38>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4a04      	ldr	r2, [pc, #16]	@ (8007a18 <prvResetNextTaskUnblockTime+0x3c>)
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	24000cb4 	.word	0x24000cb4
 8007a18:	24000d1c 	.word	0x24000d1c

08007a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a22:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <xTaskGetSchedulerState+0x34>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	e008      	b.n	8007a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a30:	4b08      	ldr	r3, [pc, #32]	@ (8007a54 <xTaskGetSchedulerState+0x38>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	e001      	b.n	8007a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a42:	687b      	ldr	r3, [r7, #4]
	}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	24000d08 	.word	0x24000d08
 8007a54:	24000d24 	.word	0x24000d24

08007a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d058      	beq.n	8007b20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b2c <xTaskPriorityDisinherit+0xd4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d00b      	beq.n	8007a90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60fb      	str	r3, [r7, #12]
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60bb      	str	r3, [r7, #8]
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	e7fd      	b.n	8007aac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab4:	1e5a      	subs	r2, r3, #1
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d02c      	beq.n	8007b20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d128      	bne.n	8007b20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fb4c 	bl	8006170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b30 <xTaskPriorityDisinherit+0xd8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <xTaskPriorityDisinherit+0xa8>
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	4a0c      	ldr	r2, [pc, #48]	@ (8007b30 <xTaskPriorityDisinherit+0xd8>)
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <xTaskPriorityDisinherit+0xdc>)
 8007b0e:	441a      	add	r2, r3
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fe facd 	bl	80060b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b20:	697b      	ldr	r3, [r7, #20]
	}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	24000828 	.word	0x24000828
 8007b30:	24000d04 	.word	0x24000d04
 8007b34:	2400082c 	.word	0x2400082c

08007b38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007b46:	f000 fde7 	bl	8008718 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b4a:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d01a      	beq.n	8007b8e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b58:	4b22      	ldr	r3, [pc, #136]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	43d2      	mvns	r2, r2
 8007b62:	400a      	ands	r2, r1
 8007b64:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b66:	4b1f      	ldr	r3, [pc, #124]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b76:	2101      	movs	r1, #1
 8007b78:	6838      	ldr	r0, [r7, #0]
 8007b7a:	f000 f8f1 	bl	8007d60 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <xTaskNotifyWait+0xb0>)
 8007b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b8e:	f000 fdf5 	bl	800877c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b92:	f000 fdc1 	bl	8008718 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b9c:	4b11      	ldr	r3, [pc, #68]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d002      	beq.n	8007bba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e008      	b.n	8007bcc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007bba:	4b0a      	ldr	r3, [pc, #40]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	43d2      	mvns	r2, r2
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <xTaskNotifyWait+0xac>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8007bd6:	f000 fdd1 	bl	800877c <vPortExitCritical>

		return xReturn;
 8007bda:	697b      	ldr	r3, [r7, #20]
	}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	24000828 	.word	0x24000828
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	@ 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10b      	bne.n	8007c1e <xTaskGenericNotify+0x32>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	61bb      	str	r3, [r7, #24]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007c22:	f000 fd79 	bl	8008718 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007c3a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d827      	bhi.n	8007c9a <xTaskGenericNotify+0xae>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <xTaskGenericNotify+0x64>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007cbd 	.word	0x08007cbd
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c73 	.word	0x08007c73
 8007c5c:	08007c7f 	.word	0x08007c7f
 8007c60:	08007c87 	.word	0x08007c87
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007c70:	e027      	b.n	8007cc2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007c7c:	e021      	b.n	8007cc2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007c84:	e01d      	b.n	8007cc2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d003      	beq.n	8007c94 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c92:	e016      	b.n	8007cc2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007c98:	e013      	b.n	8007cc2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ca2:	d00d      	beq.n	8007cc0 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	617b      	str	r3, [r7, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <xTaskGenericNotify+0xcc>
					break;
 8007cbc:	bf00      	nop
 8007cbe:	e000      	b.n	8007cc2 <xTaskGenericNotify+0xd6>

					break;
 8007cc0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007cc2:	7ffb      	ldrb	r3, [r7, #31]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d13b      	bne.n	8007d40 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe fa4f 	bl	8006170 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d50 <xTaskGenericNotify+0x164>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d903      	bls.n	8007ce6 <xTaskGenericNotify+0xfa>
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d50 <xTaskGenericNotify+0x164>)
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <xTaskGenericNotify+0x168>)
 8007cf4:	441a      	add	r2, r3
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fe f9da 	bl	80060b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <xTaskGenericNotify+0x136>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	613b      	str	r3, [r7, #16]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d26:	4b0c      	ldr	r3, [pc, #48]	@ (8007d58 <xTaskGenericNotify+0x16c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d907      	bls.n	8007d40 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007d30:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <xTaskGenericNotify+0x170>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d40:	f000 fd1c 	bl	800877c <vPortExitCritical>

		return xReturn;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	@ 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	24000d04 	.word	0x24000d04
 8007d54:	2400082c 	.word	0x2400082c
 8007d58:	24000828 	.word	0x24000828
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d6a:	4b21      	ldr	r3, [pc, #132]	@ (8007df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d70:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe f9fa 	bl	8006170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d82:	d10a      	bne.n	8007d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4819      	ldr	r0, [pc, #100]	@ (8007df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d94:	f7fe f98f 	bl	80060b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d98:	e026      	b.n	8007de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4413      	add	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007da2:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d209      	bcs.n	8007dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007db2:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b0f      	ldr	r3, [pc, #60]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fe f99d 	bl	80060fe <vListInsert>
}
 8007dc4:	e010      	b.n	8007de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f7fe f993 	bl	80060fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d202      	bcs.n	8007de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007de2:	4a08      	ldr	r2, [pc, #32]	@ (8007e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6013      	str	r3, [r2, #0]
}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	24000d00 	.word	0x24000d00
 8007df4:	24000828 	.word	0x24000828
 8007df8:	24000ce8 	.word	0x24000ce8
 8007dfc:	24000cb8 	.word	0x24000cb8
 8007e00:	24000cb4 	.word	0x24000cb4
 8007e04:	24000d1c 	.word	0x24000d1c

08007e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	@ 0x28
 8007e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e12:	f000 fb13 	bl	800843c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e16:	4b1d      	ldr	r3, [pc, #116]	@ (8007e8c <xTimerCreateTimerTask+0x84>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d021      	beq.n	8007e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e26:	1d3a      	adds	r2, r7, #4
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe f8f9 	bl	8006028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	9202      	str	r2, [sp, #8]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	2302      	movs	r3, #2
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	460a      	mov	r2, r1
 8007e48:	4911      	ldr	r1, [pc, #68]	@ (8007e90 <xTimerCreateTimerTask+0x88>)
 8007e4a:	4812      	ldr	r0, [pc, #72]	@ (8007e94 <xTimerCreateTimerTask+0x8c>)
 8007e4c:	f7fe feb4 	bl	8006bb8 <xTaskCreateStatic>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4a11      	ldr	r2, [pc, #68]	@ (8007e98 <xTimerCreateTimerTask+0x90>)
 8007e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e56:	4b10      	ldr	r3, [pc, #64]	@ (8007e98 <xTimerCreateTimerTask+0x90>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	613b      	str	r3, [r7, #16]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e80:	697b      	ldr	r3, [r7, #20]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	24000d58 	.word	0x24000d58
 8007e90:	08008e40 	.word	0x08008e40
 8007e94:	08007fd5 	.word	0x08007fd5
 8007e98:	24000d5c 	.word	0x24000d5c

08007e9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	@ 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <xTimerGenericCommand+0x30>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	623b      	str	r3, [r7, #32]
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ecc:	4b19      	ldr	r3, [pc, #100]	@ (8007f34 <xTimerGenericCommand+0x98>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02a      	beq.n	8007f2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	dc18      	bgt.n	8007f18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ee6:	f7ff fd99 	bl	8007a1c <xTaskGetSchedulerState>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d109      	bne.n	8007f04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ef0:	4b10      	ldr	r3, [pc, #64]	@ (8007f34 <xTimerGenericCommand+0x98>)
 8007ef2:	6818      	ldr	r0, [r3, #0]
 8007ef4:	f107 0110 	add.w	r1, r7, #16
 8007ef8:	2300      	movs	r3, #0
 8007efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007efc:	f7fe fa6c 	bl	80063d8 <xQueueGenericSend>
 8007f00:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f02:	e012      	b.n	8007f2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f04:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <xTimerGenericCommand+0x98>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	f107 0110 	add.w	r1, r7, #16
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f7fe fa62 	bl	80063d8 <xQueueGenericSend>
 8007f14:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f16:	e008      	b.n	8007f2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <xTimerGenericCommand+0x98>)
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	f107 0110 	add.w	r1, r7, #16
 8007f20:	2300      	movs	r3, #0
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	f7fe fb5a 	bl	80065dc <xQueueGenericSendFromISR>
 8007f28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3728      	adds	r7, #40	@ 0x28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	24000d58 	.word	0x24000d58

08007f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f42:	4b23      	ldr	r3, [pc, #140]	@ (8007fd0 <prvProcessExpiredTimer+0x98>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe f90d 	bl	8006170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d023      	beq.n	8007fac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	18d1      	adds	r1, r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	6978      	ldr	r0, [r7, #20]
 8007f72:	f000 f8d5 	bl	8008120 <prvInsertTimerInActiveList>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d020      	beq.n	8007fbe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2300      	movs	r3, #0
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	2100      	movs	r1, #0
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f7ff ff88 	bl	8007e9c <xTimerGenericCommand>
 8007f8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d114      	bne.n	8007fbe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	4798      	blx	r3
}
 8007fc6:	bf00      	nop
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	24000d50 	.word	0x24000d50

08007fd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fdc:	f107 0308 	add.w	r3, r7, #8
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f859 	bl	8008098 <prvGetNextExpireTime>
 8007fe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4619      	mov	r1, r3
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f805 	bl	8007ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ff2:	f000 f8d7 	bl	80081a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ff6:	bf00      	nop
 8007ff8:	e7f0      	b.n	8007fdc <prvTimerTask+0x8>
	...

08007ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008006:	f7ff f923 	bl	8007250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f866 	bl	80080e0 <prvSampleTimeNow>
 8008014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d130      	bne.n	800807e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	429a      	cmp	r2, r3
 8008028:	d806      	bhi.n	8008038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800802a:	f7ff f91f 	bl	800726c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ff81 	bl	8007f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008036:	e024      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800803e:	4b13      	ldr	r3, [pc, #76]	@ (800808c <prvProcessTimerOrBlockTask+0x90>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <prvProcessTimerOrBlockTask+0x50>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <prvProcessTimerOrBlockTask+0x52>
 800804c:	2300      	movs	r3, #0
 800804e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008050:	4b0f      	ldr	r3, [pc, #60]	@ (8008090 <prvProcessTimerOrBlockTask+0x94>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4619      	mov	r1, r3
 800805e:	f7fe fd77 	bl	8006b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008062:	f7ff f903 	bl	800726c <xTaskResumeAll>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800806c:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <prvProcessTimerOrBlockTask+0x98>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
}
 800807c:	e001      	b.n	8008082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800807e:	f7ff f8f5 	bl	800726c <xTaskResumeAll>
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	24000d54 	.word	0x24000d54
 8008090:	24000d58 	.word	0x24000d58
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080a0:	4b0e      	ldr	r3, [pc, #56]	@ (80080dc <prvGetNextExpireTime+0x44>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <prvGetNextExpireTime+0x16>
 80080aa:	2201      	movs	r2, #1
 80080ac:	e000      	b.n	80080b0 <prvGetNextExpireTime+0x18>
 80080ae:	2200      	movs	r2, #0
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d105      	bne.n	80080c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080bc:	4b07      	ldr	r3, [pc, #28]	@ (80080dc <prvGetNextExpireTime+0x44>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e001      	b.n	80080cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080cc:	68fb      	ldr	r3, [r7, #12]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	24000d50 	.word	0x24000d50

080080e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080e8:	f7ff f95e 	bl	80073a8 <xTaskGetTickCount>
 80080ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ee:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <prvSampleTimeNow+0x3c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d205      	bcs.n	8008104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080f8:	f000 f93a 	bl	8008370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e002      	b.n	800810a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800810a:	4a04      	ldr	r2, [pc, #16]	@ (800811c <prvSampleTimeNow+0x3c>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	24000d60 	.word	0x24000d60

08008120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d812      	bhi.n	800816c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e01b      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800815a:	4b10      	ldr	r3, [pc, #64]	@ (800819c <prvInsertTimerInActiveList+0x7c>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fd ffca 	bl	80060fe <vListInsert>
 800816a:	e012      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d206      	bcs.n	8008182 <prvInsertTimerInActiveList+0x62>
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d302      	bcc.n	8008182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e007      	b.n	8008192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008182:	4b07      	ldr	r3, [pc, #28]	@ (80081a0 <prvInsertTimerInActiveList+0x80>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7fd ffb6 	bl	80060fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008192:	697b      	ldr	r3, [r7, #20]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	24000d54 	.word	0x24000d54
 80081a0:	24000d50 	.word	0x24000d50

080081a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	@ 0x38
 80081a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081aa:	e0ce      	b.n	800834a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da19      	bge.n	80081e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081b2:	1d3b      	adds	r3, r7, #4
 80081b4:	3304      	adds	r3, #4
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	61fb      	str	r3, [r7, #28]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081dc:	6850      	ldr	r0, [r2, #4]
 80081de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081e0:	6892      	ldr	r2, [r2, #8]
 80081e2:	4611      	mov	r1, r2
 80081e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f2c0 80ae 	blt.w	800834a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd ffb6 	bl	8006170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008204:	463b      	mov	r3, r7
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff ff6a 	bl	80080e0 <prvSampleTimeNow>
 800820c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b09      	cmp	r3, #9
 8008212:	f200 8097 	bhi.w	8008344 <prvProcessReceivedCommands+0x1a0>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <prvProcessReceivedCommands+0x78>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008245 	.word	0x08008245
 8008220:	08008245 	.word	0x08008245
 8008224:	08008245 	.word	0x08008245
 8008228:	080082bb 	.word	0x080082bb
 800822c:	080082cf 	.word	0x080082cf
 8008230:	0800831b 	.word	0x0800831b
 8008234:	08008245 	.word	0x08008245
 8008238:	08008245 	.word	0x08008245
 800823c:	080082bb 	.word	0x080082bb
 8008240:	080082cf 	.word	0x080082cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	18d1      	adds	r1, r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008264:	f7ff ff5c 	bl	8008120 <prvInsertTimerInActiveList>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d06c      	beq.n	8008348 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d061      	beq.n	8008348 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	441a      	add	r2, r3
 800828c:	2300      	movs	r3, #0
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	2300      	movs	r3, #0
 8008292:	2100      	movs	r1, #0
 8008294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008296:	f7ff fe01 	bl	8007e9c <xTimerGenericCommand>
 800829a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d152      	bne.n	8008348 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61bb      	str	r3, [r7, #24]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082cc:	e03d      	b.n	800834a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10b      	bne.n	8008306 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	617b      	str	r3, [r7, #20]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	18d1      	adds	r1, r2, r3
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008314:	f7ff ff04 	bl	8008120 <prvInsertTimerInActiveList>
					break;
 8008318:	e017      	b.n	800834a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d103      	bne.n	8008330 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800832a:	f000 fbe5 	bl	8008af8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800832e:	e00c      	b.n	800834a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008336:	f023 0301 	bic.w	r3, r3, #1
 800833a:	b2da      	uxtb	r2, r3
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008342:	e002      	b.n	800834a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <prvProcessReceivedCommands+0x1a6>
					break;
 8008348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800834a:	4b08      	ldr	r3, [pc, #32]	@ (800836c <prvProcessReceivedCommands+0x1c8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	1d39      	adds	r1, r7, #4
 8008350:	2200      	movs	r2, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe f9e0 	bl	8006718 <xQueueReceive>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	f47f af26 	bne.w	80081ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3730      	adds	r7, #48	@ 0x30
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	24000d58 	.word	0x24000d58

08008370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008376:	e049      	b.n	800840c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008378:	4b2e      	ldr	r3, [pc, #184]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fd feed 	bl	8006170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d02f      	beq.n	800840c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4413      	add	r3, r2
 80083b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d90e      	bls.n	80083dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7fd fe92 	bl	80060fe <vListInsert>
 80083da:	e017      	b.n	800840c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083dc:	2300      	movs	r3, #0
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	2300      	movs	r3, #0
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	2100      	movs	r1, #0
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fd58 	bl	8007e9c <xTimerGenericCommand>
 80083ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	603b      	str	r3, [r7, #0]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800840c:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1b0      	bne.n	8008378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008416:	4b07      	ldr	r3, [pc, #28]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <prvSwitchTimerLists+0xc8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a04      	ldr	r2, [pc, #16]	@ (8008434 <prvSwitchTimerLists+0xc4>)
 8008422:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008424:	4a04      	ldr	r2, [pc, #16]	@ (8008438 <prvSwitchTimerLists+0xc8>)
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6013      	str	r3, [r2, #0]
}
 800842a:	bf00      	nop
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	24000d50 	.word	0x24000d50
 8008438:	24000d54 	.word	0x24000d54

0800843c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008442:	f000 f969 	bl	8008718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008446:	4b15      	ldr	r3, [pc, #84]	@ (800849c <prvCheckForValidListAndQueue+0x60>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d120      	bne.n	8008490 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800844e:	4814      	ldr	r0, [pc, #80]	@ (80084a0 <prvCheckForValidListAndQueue+0x64>)
 8008450:	f7fd fe04 	bl	800605c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008454:	4813      	ldr	r0, [pc, #76]	@ (80084a4 <prvCheckForValidListAndQueue+0x68>)
 8008456:	f7fd fe01 	bl	800605c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800845a:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <prvCheckForValidListAndQueue+0x6c>)
 800845c:	4a10      	ldr	r2, [pc, #64]	@ (80084a0 <prvCheckForValidListAndQueue+0x64>)
 800845e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008460:	4b12      	ldr	r3, [pc, #72]	@ (80084ac <prvCheckForValidListAndQueue+0x70>)
 8008462:	4a10      	ldr	r2, [pc, #64]	@ (80084a4 <prvCheckForValidListAndQueue+0x68>)
 8008464:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008466:	2300      	movs	r3, #0
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4b11      	ldr	r3, [pc, #68]	@ (80084b0 <prvCheckForValidListAndQueue+0x74>)
 800846c:	4a11      	ldr	r2, [pc, #68]	@ (80084b4 <prvCheckForValidListAndQueue+0x78>)
 800846e:	2110      	movs	r1, #16
 8008470:	200a      	movs	r0, #10
 8008472:	f7fd ff11 	bl	8006298 <xQueueGenericCreateStatic>
 8008476:	4603      	mov	r3, r0
 8008478:	4a08      	ldr	r2, [pc, #32]	@ (800849c <prvCheckForValidListAndQueue+0x60>)
 800847a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <prvCheckForValidListAndQueue+0x60>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008484:	4b05      	ldr	r3, [pc, #20]	@ (800849c <prvCheckForValidListAndQueue+0x60>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	490b      	ldr	r1, [pc, #44]	@ (80084b8 <prvCheckForValidListAndQueue+0x7c>)
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fb36 	bl	8006afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008490:	f000 f974 	bl	800877c <vPortExitCritical>
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	24000d58 	.word	0x24000d58
 80084a0:	24000d28 	.word	0x24000d28
 80084a4:	24000d3c 	.word	0x24000d3c
 80084a8:	24000d50 	.word	0x24000d50
 80084ac:	24000d54 	.word	0x24000d54
 80084b0:	24000e04 	.word	0x24000e04
 80084b4:	24000d64 	.word	0x24000d64
 80084b8:	08008e48 	.word	0x08008e48

080084bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b04      	subs	r3, #4
 80084cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80084d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 0201 	bic.w	r2, r3, #1
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3b04      	subs	r3, #4
 80084ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008520 <pxPortInitialiseStack+0x64>)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3b14      	subs	r3, #20
 80084f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b04      	subs	r3, #4
 8008502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f06f 0202 	mvn.w	r2, #2
 800850a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b20      	subs	r3, #32
 8008510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008512:	68fb      	ldr	r3, [r7, #12]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	08008525 	.word	0x08008525

08008524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800852e:	4b13      	ldr	r3, [pc, #76]	@ (800857c <prvTaskExitError+0x58>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008536:	d00b      	beq.n	8008550 <prvTaskExitError+0x2c>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	60fb      	str	r3, [r7, #12]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <prvTaskExitError+0x28>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60bb      	str	r3, [r7, #8]
}
 8008562:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008564:	bf00      	nop
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0fc      	beq.n	8008566 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	24000010 	.word	0x24000010

08008580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008580:	4b07      	ldr	r3, [pc, #28]	@ (80085a0 <pxCurrentTCBConst2>)
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	6808      	ldr	r0, [r1, #0]
 8008586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	f380 8809 	msr	PSP, r0
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8811 	msr	BASEPRI, r0
 800859a:	4770      	bx	lr
 800859c:	f3af 8000 	nop.w

080085a0 <pxCurrentTCBConst2>:
 80085a0:	24000828 	.word	0x24000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop

080085a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085a8:	4808      	ldr	r0, [pc, #32]	@ (80085cc <prvPortStartFirstTask+0x24>)
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	6800      	ldr	r0, [r0, #0]
 80085ae:	f380 8808 	msr	MSP, r0
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8814 	msr	CONTROL, r0
 80085ba:	b662      	cpsie	i
 80085bc:	b661      	cpsie	f
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	df00      	svc	0
 80085c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ca:	bf00      	nop
 80085cc:	e000ed08 	.word	0xe000ed08

080085d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085d6:	4b47      	ldr	r3, [pc, #284]	@ (80086f4 <xPortStartScheduler+0x124>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a47      	ldr	r2, [pc, #284]	@ (80086f8 <xPortStartScheduler+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10b      	bne.n	80085f8 <xPortStartScheduler+0x28>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	613b      	str	r3, [r7, #16]
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	e7fd      	b.n	80085f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085f8:	4b3e      	ldr	r3, [pc, #248]	@ (80086f4 <xPortStartScheduler+0x124>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a3f      	ldr	r2, [pc, #252]	@ (80086fc <xPortStartScheduler+0x12c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d10b      	bne.n	800861a <xPortStartScheduler+0x4a>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60fb      	str	r3, [r7, #12]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800861a:	4b39      	ldr	r3, [pc, #228]	@ (8008700 <xPortStartScheduler+0x130>)
 800861c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	22ff      	movs	r2, #255	@ 0xff
 800862a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800863c:	b2da      	uxtb	r2, r3
 800863e:	4b31      	ldr	r3, [pc, #196]	@ (8008704 <xPortStartScheduler+0x134>)
 8008640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008642:	4b31      	ldr	r3, [pc, #196]	@ (8008708 <xPortStartScheduler+0x138>)
 8008644:	2207      	movs	r2, #7
 8008646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008648:	e009      	b.n	800865e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800864a:	4b2f      	ldr	r3, [pc, #188]	@ (8008708 <xPortStartScheduler+0x138>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3b01      	subs	r3, #1
 8008650:	4a2d      	ldr	r2, [pc, #180]	@ (8008708 <xPortStartScheduler+0x138>)
 8008652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008666:	2b80      	cmp	r3, #128	@ 0x80
 8008668:	d0ef      	beq.n	800864a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800866a:	4b27      	ldr	r3, [pc, #156]	@ (8008708 <xPortStartScheduler+0x138>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1c3 0307 	rsb	r3, r3, #7
 8008672:	2b04      	cmp	r3, #4
 8008674:	d00b      	beq.n	800868e <xPortStartScheduler+0xbe>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800868e:	4b1e      	ldr	r3, [pc, #120]	@ (8008708 <xPortStartScheduler+0x138>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	4a1c      	ldr	r2, [pc, #112]	@ (8008708 <xPortStartScheduler+0x138>)
 8008696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008698:	4b1b      	ldr	r3, [pc, #108]	@ (8008708 <xPortStartScheduler+0x138>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086a0:	4a19      	ldr	r2, [pc, #100]	@ (8008708 <xPortStartScheduler+0x138>)
 80086a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ac:	4b17      	ldr	r3, [pc, #92]	@ (800870c <xPortStartScheduler+0x13c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a16      	ldr	r2, [pc, #88]	@ (800870c <xPortStartScheduler+0x13c>)
 80086b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086b8:	4b14      	ldr	r3, [pc, #80]	@ (800870c <xPortStartScheduler+0x13c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a13      	ldr	r2, [pc, #76]	@ (800870c <xPortStartScheduler+0x13c>)
 80086be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086c4:	f000 f8da 	bl	800887c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086c8:	4b11      	ldr	r3, [pc, #68]	@ (8008710 <xPortStartScheduler+0x140>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086ce:	f000 f8f9 	bl	80088c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086d2:	4b10      	ldr	r3, [pc, #64]	@ (8008714 <xPortStartScheduler+0x144>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008714 <xPortStartScheduler+0x144>)
 80086d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80086dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086de:	f7ff ff63 	bl	80085a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086e2:	f7fe ff2b 	bl	800753c <vTaskSwitchContext>
	prvTaskExitError();
 80086e6:	f7ff ff1d 	bl	8008524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	e000ed00 	.word	0xe000ed00
 80086f8:	410fc271 	.word	0x410fc271
 80086fc:	410fc270 	.word	0x410fc270
 8008700:	e000e400 	.word	0xe000e400
 8008704:	24000e54 	.word	0x24000e54
 8008708:	24000e58 	.word	0x24000e58
 800870c:	e000ed20 	.word	0xe000ed20
 8008710:	24000010 	.word	0x24000010
 8008714:	e000ef34 	.word	0xe000ef34

08008718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008732:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <vPortEnterCritical+0x5c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3301      	adds	r3, #1
 8008738:	4a0e      	ldr	r2, [pc, #56]	@ (8008774 <vPortEnterCritical+0x5c>)
 800873a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800873c:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <vPortEnterCritical+0x5c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d110      	bne.n	8008766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008744:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <vPortEnterCritical+0x60>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <vPortEnterCritical+0x4e>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	603b      	str	r3, [r7, #0]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <vPortEnterCritical+0x4a>
	}
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	24000010 	.word	0x24000010
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008782:	4b12      	ldr	r3, [pc, #72]	@ (80087cc <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <vPortExitCritical+0x26>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	607b      	str	r3, [r7, #4]
}
 800879c:	bf00      	nop
 800879e:	bf00      	nop
 80087a0:	e7fd      	b.n	800879e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087a2:	4b0a      	ldr	r3, [pc, #40]	@ (80087cc <vPortExitCritical+0x50>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4a08      	ldr	r2, [pc, #32]	@ (80087cc <vPortExitCritical+0x50>)
 80087aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <vPortExitCritical+0x50>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <vPortExitCritical+0x44>
 80087b4:	2300      	movs	r3, #0
 80087b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f383 8811 	msr	BASEPRI, r3
}
 80087be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	24000010 	.word	0x24000010

080087d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087d0:	f3ef 8009 	mrs	r0, PSP
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	4b15      	ldr	r3, [pc, #84]	@ (8008830 <pxCurrentTCBConst>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	f01e 0f10 	tst.w	lr, #16
 80087e0:	bf08      	it	eq
 80087e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	6010      	str	r0, [r2, #0]
 80087ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087f4:	f380 8811 	msr	BASEPRI, r0
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f7fe fe9c 	bl	800753c <vTaskSwitchContext>
 8008804:	f04f 0000 	mov.w	r0, #0
 8008808:	f380 8811 	msr	BASEPRI, r0
 800880c:	bc09      	pop	{r0, r3}
 800880e:	6819      	ldr	r1, [r3, #0]
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008816:	f01e 0f10 	tst.w	lr, #16
 800881a:	bf08      	it	eq
 800881c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008820:	f380 8809 	msr	PSP, r0
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	f3af 8000 	nop.w

08008830 <pxCurrentTCBConst>:
 8008830:	24000828 	.word	0x24000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop

08008838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	607b      	str	r3, [r7, #4]
}
 8008850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008852:	f7fe fdb9 	bl	80073c8 <xTaskIncrementTick>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800885c:	4b06      	ldr	r3, [pc, #24]	@ (8008878 <xPortSysTickHandler+0x40>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	2300      	movs	r3, #0
 8008866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f383 8811 	msr	BASEPRI, r3
}
 800886e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008880:	4b0b      	ldr	r3, [pc, #44]	@ (80088b0 <vPortSetupTimerInterrupt+0x34>)
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008886:	4b0b      	ldr	r3, [pc, #44]	@ (80088b4 <vPortSetupTimerInterrupt+0x38>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800888c:	4b0a      	ldr	r3, [pc, #40]	@ (80088b8 <vPortSetupTimerInterrupt+0x3c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0a      	ldr	r2, [pc, #40]	@ (80088bc <vPortSetupTimerInterrupt+0x40>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	099b      	lsrs	r3, r3, #6
 8008898:	4a09      	ldr	r2, [pc, #36]	@ (80088c0 <vPortSetupTimerInterrupt+0x44>)
 800889a:	3b01      	subs	r3, #1
 800889c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800889e:	4b04      	ldr	r3, [pc, #16]	@ (80088b0 <vPortSetupTimerInterrupt+0x34>)
 80088a0:	2207      	movs	r2, #7
 80088a2:	601a      	str	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	e000e010 	.word	0xe000e010
 80088b4:	e000e018 	.word	0xe000e018
 80088b8:	24000000 	.word	0x24000000
 80088bc:	10624dd3 	.word	0x10624dd3
 80088c0:	e000e014 	.word	0xe000e014

080088c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80088d4 <vPortEnableVFP+0x10>
 80088c8:	6801      	ldr	r1, [r0, #0]
 80088ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80088ce:	6001      	str	r1, [r0, #0]
 80088d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088d2:	bf00      	nop
 80088d4:	e000ed88 	.word	0xe000ed88

080088d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088de:	f3ef 8305 	mrs	r3, IPSR
 80088e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b0f      	cmp	r3, #15
 80088e8:	d915      	bls.n	8008916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ea:	4a18      	ldr	r2, [pc, #96]	@ (800894c <vPortValidateInterruptPriority+0x74>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088f4:	4b16      	ldr	r3, [pc, #88]	@ (8008950 <vPortValidateInterruptPriority+0x78>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	7afa      	ldrb	r2, [r7, #11]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d20b      	bcs.n	8008916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	e7fd      	b.n	8008912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008916:	4b0f      	ldr	r3, [pc, #60]	@ (8008954 <vPortValidateInterruptPriority+0x7c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800891e:	4b0e      	ldr	r3, [pc, #56]	@ (8008958 <vPortValidateInterruptPriority+0x80>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d90b      	bls.n	800893e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	603b      	str	r3, [r7, #0]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <vPortValidateInterruptPriority+0x62>
	}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	e000e3f0 	.word	0xe000e3f0
 8008950:	24000e54 	.word	0x24000e54
 8008954:	e000ed0c 	.word	0xe000ed0c
 8008958:	24000e58 	.word	0x24000e58

0800895c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	@ 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008968:	f7fe fc72 	bl	8007250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800896c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ae0 <pvPortMalloc+0x184>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008974:	f000 f924 	bl	8008bc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008978:	4b5a      	ldr	r3, [pc, #360]	@ (8008ae4 <pvPortMalloc+0x188>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 8095 	bne.w	8008ab0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01e      	beq.n	80089ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800898c:	2208      	movs	r2, #8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d015      	beq.n	80089ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	3308      	adds	r3, #8
 80089a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <pvPortMalloc+0x6e>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	617b      	str	r3, [r7, #20]
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	e7fd      	b.n	80089c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d06f      	beq.n	8008ab0 <pvPortMalloc+0x154>
 80089d0:	4b45      	ldr	r3, [pc, #276]	@ (8008ae8 <pvPortMalloc+0x18c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d86a      	bhi.n	8008ab0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089da:	4b44      	ldr	r3, [pc, #272]	@ (8008aec <pvPortMalloc+0x190>)
 80089dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089de:	4b43      	ldr	r3, [pc, #268]	@ (8008aec <pvPortMalloc+0x190>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e4:	e004      	b.n	80089f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d903      	bls.n	8008a02 <pvPortMalloc+0xa6>
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a02:	4b37      	ldr	r3, [pc, #220]	@ (8008ae0 <pvPortMalloc+0x184>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d051      	beq.n	8008ab0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2208      	movs	r2, #8
 8008a12:	4413      	add	r3, r2
 8008a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	2308      	movs	r3, #8
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d920      	bls.n	8008a70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4413      	add	r3, r2
 8008a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <pvPortMalloc+0xfc>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a6a:	69b8      	ldr	r0, [r7, #24]
 8008a6c:	f000 f90a 	bl	8008c84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <pvPortMalloc+0x18c>)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <pvPortMalloc+0x18c>)
 8008a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <pvPortMalloc+0x18c>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b1b      	ldr	r3, [pc, #108]	@ (8008af0 <pvPortMalloc+0x194>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d203      	bcs.n	8008a92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a8a:	4b17      	ldr	r3, [pc, #92]	@ (8008ae8 <pvPortMalloc+0x18c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a18      	ldr	r2, [pc, #96]	@ (8008af0 <pvPortMalloc+0x194>)
 8008a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <pvPortMalloc+0x188>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	@ (8008af4 <pvPortMalloc+0x198>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	4a11      	ldr	r2, [pc, #68]	@ (8008af4 <pvPortMalloc+0x198>)
 8008aae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ab0:	f7fe fbdc 	bl	800726c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <pvPortMalloc+0x17a>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	60fb      	str	r3, [r7, #12]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3728      	adds	r7, #40	@ 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	24004a64 	.word	0x24004a64
 8008ae4:	24004a78 	.word	0x24004a78
 8008ae8:	24004a68 	.word	0x24004a68
 8008aec:	24004a5c 	.word	0x24004a5c
 8008af0:	24004a6c 	.word	0x24004a6c
 8008af4:	24004a70 	.word	0x24004a70

08008af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d04f      	beq.n	8008baa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	425b      	negs	r3, r3
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4413      	add	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b25      	ldr	r3, [pc, #148]	@ (8008bb4 <vPortFree+0xbc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4013      	ands	r3, r2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10b      	bne.n	8008b3e <vPortFree+0x46>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	60fb      	str	r3, [r7, #12]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <vPortFree+0x66>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60bb      	str	r3, [r7, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	4b14      	ldr	r3, [pc, #80]	@ (8008bb4 <vPortFree+0xbc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4013      	ands	r3, r2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01e      	beq.n	8008baa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11a      	bne.n	8008baa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <vPortFree+0xbc>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	401a      	ands	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b84:	f7fe fb64 	bl	8007250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <vPortFree+0xc0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4413      	add	r3, r2
 8008b92:	4a09      	ldr	r2, [pc, #36]	@ (8008bb8 <vPortFree+0xc0>)
 8008b94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b96:	6938      	ldr	r0, [r7, #16]
 8008b98:	f000 f874 	bl	8008c84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b9c:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <vPortFree+0xc4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	4a06      	ldr	r2, [pc, #24]	@ (8008bbc <vPortFree+0xc4>)
 8008ba4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ba6:	f7fe fb61 	bl	800726c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008baa:	bf00      	nop
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	24004a78 	.word	0x24004a78
 8008bb8:	24004a68 	.word	0x24004a68
 8008bbc:	24004a74 	.word	0x24004a74

08008bc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008bca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bcc:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <prvHeapInit+0xac>)
 8008bce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00c      	beq.n	8008bf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0307 	bic.w	r3, r3, #7
 8008be6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	4a1f      	ldr	r2, [pc, #124]	@ (8008c6c <prvHeapInit+0xac>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c70 <prvHeapInit+0xb0>)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8008c70 <prvHeapInit+0xb0>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	4413      	add	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	@ (8008c74 <prvHeapInit+0xb4>)
 8008c20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c22:	4b14      	ldr	r3, [pc, #80]	@ (8008c74 <prvHeapInit+0xb4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c2a:	4b12      	ldr	r3, [pc, #72]	@ (8008c74 <prvHeapInit+0xb4>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c40:	4b0c      	ldr	r3, [pc, #48]	@ (8008c74 <prvHeapInit+0xb4>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c78 <prvHeapInit+0xb8>)
 8008c4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a09      	ldr	r2, [pc, #36]	@ (8008c7c <prvHeapInit+0xbc>)
 8008c56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c58:	4b09      	ldr	r3, [pc, #36]	@ (8008c80 <prvHeapInit+0xc0>)
 8008c5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	24000e5c 	.word	0x24000e5c
 8008c70:	24004a5c 	.word	0x24004a5c
 8008c74:	24004a64 	.word	0x24004a64
 8008c78:	24004a6c 	.word	0x24004a6c
 8008c7c:	24004a68 	.word	0x24004a68
 8008c80:	24004a78 	.word	0x24004a78

08008c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c8c:	4b28      	ldr	r3, [pc, #160]	@ (8008d30 <prvInsertBlockIntoFreeList+0xac>)
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e002      	b.n	8008c98 <prvInsertBlockIntoFreeList+0x14>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d8f7      	bhi.n	8008c92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d108      	bne.n	8008cc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d118      	bne.n	8008d0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b15      	ldr	r3, [pc, #84]	@ (8008d34 <prvInsertBlockIntoFreeList+0xb0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d00d      	beq.n	8008d02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e008      	b.n	8008d14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d02:	4b0c      	ldr	r3, [pc, #48]	@ (8008d34 <prvInsertBlockIntoFreeList+0xb0>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	e003      	b.n	8008d14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d002      	beq.n	8008d22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	24004a5c 	.word	0x24004a5c
 8008d34:	24004a64 	.word	0x24004a64

08008d38 <memset>:
 8008d38:	4402      	add	r2, r0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d100      	bne.n	8008d42 <memset+0xa>
 8008d40:	4770      	bx	lr
 8008d42:	f803 1b01 	strb.w	r1, [r3], #1
 8008d46:	e7f9      	b.n	8008d3c <memset+0x4>

08008d48 <__libc_init_array>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008d80 <__libc_init_array+0x38>)
 8008d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008d84 <__libc_init_array+0x3c>)
 8008d4e:	1b64      	subs	r4, r4, r5
 8008d50:	10a4      	asrs	r4, r4, #2
 8008d52:	2600      	movs	r6, #0
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	d109      	bne.n	8008d6c <__libc_init_array+0x24>
 8008d58:	4d0b      	ldr	r5, [pc, #44]	@ (8008d88 <__libc_init_array+0x40>)
 8008d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008d8c <__libc_init_array+0x44>)
 8008d5c:	f000 f826 	bl	8008dac <_init>
 8008d60:	1b64      	subs	r4, r4, r5
 8008d62:	10a4      	asrs	r4, r4, #2
 8008d64:	2600      	movs	r6, #0
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	d105      	bne.n	8008d76 <__libc_init_array+0x2e>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d70:	4798      	blx	r3
 8008d72:	3601      	adds	r6, #1
 8008d74:	e7ee      	b.n	8008d54 <__libc_init_array+0xc>
 8008d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7a:	4798      	blx	r3
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	e7f2      	b.n	8008d66 <__libc_init_array+0x1e>
 8008d80:	08008eb4 	.word	0x08008eb4
 8008d84:	08008eb4 	.word	0x08008eb4
 8008d88:	08008eb4 	.word	0x08008eb4
 8008d8c:	08008eb8 	.word	0x08008eb8

08008d90 <memcpy>:
 8008d90:	440a      	add	r2, r1
 8008d92:	4291      	cmp	r1, r2
 8008d94:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008d98:	d100      	bne.n	8008d9c <memcpy+0xc>
 8008d9a:	4770      	bx	lr
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da6:	4291      	cmp	r1, r2
 8008da8:	d1f9      	bne.n	8008d9e <memcpy+0xe>
 8008daa:	bd10      	pop	{r4, pc}

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
